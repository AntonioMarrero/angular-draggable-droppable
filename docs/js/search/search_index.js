var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.2","fields":["title","body"],"fieldVectors":[["title/interfaces/Coordinates.html",[0,0.024,1,0.636]],["body/interfaces/Coordinates.html",[0,0.042,1,1.036,2,0.386,3,0.329,4,0.276,5,0.276,6,0.381,7,0.516,8,0.329,9,1.006,10,1.359,11,1.359,12,1.108,13,0.767,14,0.053,15,0.615,16,0.338,17,0.67,18,0.67,19,0.67,20,0.861,21,0.999,22,0.969,23,0.67,24,0.882,25,0.67,26,0.882,27,0.591,28,0.882,29,0.882,30,0.492,31,0.276,32,1.15,33,0.67,34,0.923,35,1.057,36,0.591,37,0.386,38,0.67,39,0.591,40,0.591,41,0.591,42,0.591,43,0.448,44,1.255,45,0.802,46,0.882,47,0.591,48,0.448,49,0.591,50,0.802,51,0.448,52,0.892,53,0.591,54,0.577,55,0.589,56,0.386,57,0.813,58,0.923,59,1.088,60,0.67,61,0.516,62,1.057,63,0.516,64,1.172,65,0.516,66,0.516,67,1.024,68,0.802,69,0.771,70,0.955,71,0.955,72,0.721,73,1.316,74,1.364,75,0.386,76,0.516,77,0.412,78,0.448,79,0.386,80,0.591,81,0.516,82,0.591,83,0.329,84,0.67,85,0.771,86,0.882,87,1.03,88,0.999,89,0.448,90,0.853,91,0.448,92,0.516,93,0.923,94,1.024,95,0.771,96,0.516,97,0.591,98,0.448,99,0.516,100,0.591,101,0.516,102,0.591,103,0.923,104,0.386,105,0.516,106,0.821,107,0.516,108,0.516,109,0.577,110,0.386,111,0.516,112,0.516,113,1.172,114,0.516,115,1.172,116,0.448,117,0.516,118,0.591,119,0.516,120,0.591,121,0.591,122,1.057,123,0.516,124,0.892,125,0.771,126,0.923,127,0.516,128,0.516,129,0.591,130,0.516,131,0.981,132,0.18,133,0.516,134,0.386,135,0.591,136,0.516,137,0.516,138,0.771,139,0.516,140,0.516,141,1.024,142,1.255,143,0.591,144,1.057,145,0.591,146,1.217,147,0.591,148,0.882,149,1.596,150,0.771,151,0.771,152,0.882,153,0.882,154,0.882,155,0.882,156,0.882,157,0.882,158,0.591,159,0.882,160,0.516,161,0.448,162,0.448,163,0.386,164,0.591,165,0.67,166,0.591,167,0.448,168,0.882,169,1.207,170,0.591,171,0.591,172,0.882,173,0.591,174,0.771,175,0.591,176,0.591,177,0.448,178,0.591,179,0.516,180,0.591,181,0.882,182,0.591,183,0.516,184,0.516,185,0.386,186,1.255,187,0.591,188,0.882,189,0.591,190,0.591,191,0.771,192,0.591,193,0.591,194,0.591,195,0.591,196,0.516,197,0.882,198,1.024,199,1.172,200,0.882,201,0.882,202,0.591,203,0.591,204,0.882,205,0.591,206,0.591,207,0.67,208,0.448,209,0.386,210,1.139,211,0.591,212,0.591,213,0.591,214,0.802,215,0.591,216,1.057,217,0.952,218,0.591,219,1.192,220,0.591,221,0.591,222,0.591,223,0.591,224,0.591,225,0.591,226,0.591,227,0.591,228,0.882,229,0.882,230,0.591,231,0.882,232,0.882,233,0.591,234,0.591,235,0.591,236,0.591,237,0.591,238,1.057,239,1.057,240,1.057,241,0.591,242,1.057,243,1.057,244,0.591,245,1.057,246,0.882,247,0.882,248,0.882,249,0.591,250,0.591,251,0.882,252,0.591,253,0.591,254,0.882,255,0.591,256,0.882,257,1.057,258,0.591,259,0.591,260,0.591,261,0.448,262,1.065,263,0.67,264,0.591,265,0.386,266,0.448,267,0.923,268,0.591,269,0.591,270,0.882,271,0.882,272,0.591,273,0.591,274,0.591,275,0.591,276,1.057,277,0.591,278,0.516,279,1.057,280,0.591,281,1.057,282,0.591,283,0.591,284,0.591,285,0.591,286,0.591,287,0.591,288,0.516,289,0.882,290,0.591,291,0.591,292,0.591,293,0.591,294,0.591,295,0.591,296,0.591,297,0.591,298,0.882,299,0.591,300,0.591,301,0.591,302,0.591,303,0.591,304,1.057,305,0.591,306,0.591,307,0.591,308,0.591,309,0.802,310,0.591,311,0.448,312,0.591,313,0.591,314,0.591,315,0.591,316,0.591,317,0.591,318,0.771,319,0.591,320,0.591,321,0.591,322,0.591,323,0.591,324,0.591,325,0.591,326,0.591,327,0.591,328,1.46,329,0.591,330,0.591,331,0.591,332,0.591,333,0.591,334,0.591,335,0.591,336,0.591,337,0.448,338,0.882,339,0.591,340,0.591,341,0.591,342,0.591,343,0.591,344,1.172,345,1.057,346,0.591,347,0.591,348,0.591,349,1.088,350,0.591,351,0.591,352,0.591,353,0.591,354,0.591,355,0.591,356,0.882,357,0.591,358,0.591,359,0.591,360,0.591,361,0.591,362,0.591,363,1.255,364,0.882,365,0.882,366,0.591,367,0.591,368,0.882,369,0.882,370,0.882,371,0.591,372,1.057,373,0.882,374,0.591,375,1.255,376,0.882,377,0.591,378,0.591,379,0.591,380,0.591,381,0.591,382,0.591,383,0.591,384,0.591,385,0.591,386,0.591,387,0.591,388,0.591,389,0.591,390,0.591,391,0.591,392,0.882,393,0.591,394,0.882,395,0.591,396,0.591,397,0.591,398,0.591,399,0.591,400,0.591,401,0.591,402,0.591,403,0.591,404,0.591,405,0.027,406,0.027]],["title/modules/DragAndDropModule.html",[407,1.239,408,1.415]],["body/modules/DragAndDropModule.html",[2,0.83,3,0.707,4,0.593,5,0.593,6,0.447,14,0.052,15,0.745,31,0.593,54,1.015,55,0.707,56,0.83,57,0.864,77,0.593,78,1.232,405,0.045,406,0.045,407,1.877,408,2.483,409,4.224,410,4.224,411,3.944,412,3.153,413,3.944,414,4.224,415,4.224]],["title/interfaces/DragAxis.html",[0,0.024,58,0.732]],["body/interfaces/DragAxis.html",[0,0.042,1,0.999,2,0.386,3,0.329,4,0.276,5,0.276,6,0.381,7,0.516,8,0.329,9,1.006,10,1.359,11,1.359,12,0.999,13,0.767,14,0.053,15,0.615,16,0.338,17,0.67,18,0.67,19,0.67,20,0.861,21,0.999,22,0.969,23,0.67,24,0.882,25,0.67,26,0.882,27,0.591,28,0.882,29,0.882,30,0.492,31,0.276,32,1.15,33,0.67,34,0.923,35,1.057,36,0.591,37,0.386,38,0.67,39,0.591,40,0.591,41,0.591,42,0.591,43,0.448,44,1.255,45,0.802,46,0.882,47,0.591,48,0.448,49,0.591,50,0.802,51,0.448,52,0.892,53,0.591,54,0.577,55,0.589,56,0.386,57,0.813,58,1.024,59,1.152,60,0.67,61,0.516,62,1.057,63,0.516,64,1.172,65,0.516,66,0.516,67,1.024,68,0.802,69,0.771,70,0.955,71,0.955,72,0.721,73,1.316,74,1.364,75,0.386,76,0.516,77,0.412,78,0.448,79,0.386,80,0.591,81,0.516,82,0.591,83,0.329,84,0.67,85,0.771,86,0.882,87,1.03,88,0.999,89,0.448,90,0.853,91,0.448,92,0.516,93,0.923,94,1.024,95,0.771,96,0.516,97,0.591,98,0.448,99,0.516,100,0.591,101,0.516,102,0.591,103,0.923,104,0.386,105,0.516,106,0.821,107,0.516,108,0.516,109,0.577,110,0.386,111,0.516,112,0.516,113,1.172,114,0.516,115,1.172,116,0.448,117,0.516,118,0.591,119,0.516,120,0.591,121,0.591,122,1.057,123,0.516,124,0.892,125,0.771,126,0.923,127,0.516,128,0.516,129,0.591,130,0.516,131,0.981,132,0.18,133,0.516,134,0.386,135,0.591,136,0.516,137,0.516,138,0.771,139,0.516,140,0.516,141,1.024,142,1.255,143,0.591,144,1.057,145,0.591,146,1.217,147,0.591,148,0.882,149,1.596,150,0.771,151,0.771,152,0.882,153,0.882,154,0.882,155,0.882,156,0.882,157,0.882,158,0.591,159,0.882,160,0.516,161,0.448,162,0.448,163,0.386,164,0.591,165,0.67,166,0.591,167,0.448,168,0.882,169,1.207,170,0.591,171,0.591,172,0.882,173,0.591,174,0.771,175,0.591,176,0.591,177,0.448,178,0.591,179,0.516,180,0.591,181,0.882,182,0.591,183,0.516,184,0.516,185,0.386,186,1.255,187,0.591,188,0.882,189,0.591,190,0.591,191,0.771,192,0.591,193,0.591,194,0.591,195,0.591,196,0.516,197,0.882,198,1.024,199,1.172,200,0.882,201,0.882,202,0.591,203,0.591,204,0.882,205,0.591,206,0.591,207,0.67,208,0.448,209,0.386,210,1.139,211,0.591,212,0.591,213,0.591,214,0.802,215,0.591,216,1.057,217,0.952,218,0.591,219,1.192,220,0.591,221,0.591,222,0.591,223,0.591,224,0.591,225,0.591,226,0.591,227,0.591,228,0.882,229,0.882,230,0.591,231,0.882,232,0.882,233,0.591,234,0.591,235,0.591,236,0.591,237,0.591,238,1.057,239,1.057,240,1.057,241,0.591,242,1.057,243,1.057,244,0.591,245,1.057,246,0.882,247,0.882,248,0.882,249,0.591,250,0.591,251,0.882,252,0.591,253,0.591,254,0.882,255,0.591,256,0.882,257,1.057,258,0.591,259,0.591,260,0.591,261,0.448,262,1.065,263,0.67,264,0.591,265,0.386,266,0.448,267,0.923,268,0.591,269,0.591,270,0.882,271,0.882,272,0.591,273,0.591,274,0.591,275,0.591,276,1.057,277,0.591,278,0.516,279,1.057,280,0.591,281,1.057,282,0.591,283,0.591,284,0.591,285,0.591,286,0.591,287,0.591,288,0.516,289,0.882,290,0.591,291,0.591,292,0.591,293,0.591,294,0.591,295,0.591,296,0.591,297,0.591,298,0.882,299,0.591,300,0.591,301,0.591,302,0.591,303,0.591,304,1.057,305,0.591,306,0.591,307,0.591,308,0.591,309,0.802,310,0.591,311,0.448,312,0.591,313,0.591,314,0.591,315,0.591,316,0.591,317,0.591,318,0.771,319,0.591,320,0.591,321,0.591,322,0.591,323,0.591,324,0.591,325,0.591,326,0.591,327,0.591,328,1.46,329,0.591,330,0.591,331,0.591,332,0.591,333,0.591,334,0.591,335,0.591,336,0.591,337,0.448,338,0.882,339,0.591,340,0.591,341,0.591,342,0.591,343,0.591,344,1.172,345,1.057,346,0.591,347,0.591,348,0.591,349,1.088,350,0.591,351,0.591,352,0.591,353,0.591,354,0.591,355,0.591,356,0.882,357,0.591,358,0.591,359,0.591,360,0.591,361,0.591,362,0.591,363,1.255,364,0.882,365,0.882,366,0.591,367,0.591,368,0.882,369,0.882,370,0.882,371,0.591,372,1.057,373,0.882,374,0.591,375,1.255,376,0.882,377,0.591,378,0.591,379,0.591,380,0.591,381,0.591,382,0.591,383,0.591,384,0.591,385,0.591,386,0.591,387,0.591,388,0.591,389,0.591,390,0.591,391,0.591,392,0.882,393,0.591,394,0.882,395,0.591,396,0.591,397,0.591,398,0.591,399,0.591,400,0.591,401,0.591,402,0.591,403,0.591,404,0.591,405,0.027,406,0.027]],["title/interfaces/DragEndEvent.html",[0,0.024,66,0.732]],["body/interfaces/DragEndEvent.html",[0,0.042,1,1.036,2,0.387,3,0.33,4,0.276,5,0.276,6,0.382,7,0.517,8,0.33,9,1.008,10,1.326,11,1.326,12,1,13,0.692,14,0.053,15,0.615,16,0.338,17,0.671,18,0.671,19,0.671,20,0.862,21,1,22,0.97,23,0.671,24,0.884,25,0.671,26,0.884,27,0.592,28,0.884,29,0.884,30,0.492,31,0.276,32,1.151,33,0.671,34,0.924,35,1.058,36,0.592,37,0.387,38,0.671,39,0.592,40,0.592,41,0.592,42,0.592,43,0.449,44,1.256,45,0.803,46,0.884,47,0.592,48,0.449,49,0.592,50,0.803,51,0.449,52,0.893,53,0.592,54,0.578,55,0.589,56,0.387,57,0.813,58,0.924,59,1.125,60,0.671,61,0.517,62,1.173,63,0.517,64,1.173,65,0.517,66,0.772,67,1.193,68,0.803,69,0.772,70,0.955,71,0.955,72,0.721,73,1.317,74,1.365,75,0.387,76,0.517,77,0.413,78,0.449,79,0.387,80,0.592,81,0.517,82,0.592,83,0.33,84,0.671,85,0.772,86,0.884,87,1.03,88,1,89,0.449,90,0.853,91,0.449,92,0.517,93,0.924,94,1.025,95,0.772,96,0.517,97,0.592,98,0.449,99,0.517,100,0.592,101,0.517,102,0.592,103,0.924,104,0.387,105,0.517,106,0.821,107,0.517,108,0.517,109,0.578,110,0.387,111,0.517,112,0.517,113,1.173,114,0.517,115,1.173,116,0.449,117,0.517,118,0.592,119,0.517,120,0.592,121,0.592,122,1.058,123,0.517,124,0.893,125,0.772,126,0.924,127,0.517,128,0.517,129,0.592,130,0.517,131,0.982,132,0.18,133,0.517,134,0.387,135,0.592,136,0.517,137,0.517,138,0.772,139,0.517,140,0.517,141,1.025,142,1.256,143,0.592,144,1.058,145,0.592,146,1.217,147,0.592,148,0.884,149,1.597,150,0.772,151,0.772,152,0.884,153,0.884,154,0.884,155,0.884,156,0.884,157,0.884,158,0.592,159,0.884,160,0.517,161,0.449,162,0.449,163,0.387,164,0.592,165,0.671,166,0.592,167,0.449,168,0.884,169,1.207,170,0.592,171,0.592,172,0.884,173,0.592,174,0.772,175,0.592,176,0.592,177,0.449,178,0.592,179,0.517,180,0.592,181,0.884,182,0.592,183,0.517,184,0.517,185,0.387,186,1.256,187,0.592,188,0.884,189,0.592,190,0.592,191,0.772,192,0.592,193,0.592,194,0.592,195,0.592,196,0.517,197,0.884,198,1.025,199,1.173,200,0.884,201,0.884,202,0.592,203,0.592,204,0.884,205,0.592,206,0.592,207,0.671,208,0.449,209,0.387,210,1.14,211,0.592,212,0.592,213,0.592,214,0.803,215,0.592,216,1.058,217,0.953,218,0.592,219,1.193,220,0.592,221,0.592,222,0.592,223,0.592,224,0.592,225,0.592,226,0.592,227,0.592,228,0.884,229,0.884,230,0.592,231,0.884,232,0.884,233,0.592,234,0.592,235,0.592,236,0.592,237,0.592,238,1.058,239,1.058,240,1.058,241,0.592,242,1.058,243,1.058,244,0.592,245,1.058,246,0.884,247,0.884,248,0.884,249,0.592,250,0.592,251,0.884,252,0.592,253,0.592,254,0.884,255,0.592,256,0.884,257,1.058,258,0.592,259,0.592,260,0.592,261,0.449,262,1.065,263,0.671,264,0.592,265,0.387,266,0.449,267,0.924,268,0.592,269,0.592,270,0.884,271,0.884,272,0.592,273,0.592,274,0.592,275,0.592,276,1.058,277,0.592,278,0.517,279,1.058,280,0.592,281,1.058,282,0.592,283,0.592,284,0.592,285,0.592,286,0.592,287,0.592,288,0.517,289,0.884,290,0.592,291,0.592,292,0.592,293,0.592,294,0.592,295,0.592,296,0.592,297,0.592,298,0.884,299,0.592,300,0.592,301,0.592,302,0.592,303,0.592,304,1.058,305,0.592,306,0.592,307,0.592,308,0.592,309,0.803,310,0.592,311,0.449,312,0.592,313,0.592,314,0.592,315,0.592,316,0.592,317,0.592,318,0.772,319,0.592,320,0.592,321,0.592,322,0.592,323,0.592,324,0.592,325,0.592,326,0.592,327,0.592,328,1.46,329,0.592,330,0.592,331,0.592,332,0.592,333,0.592,334,0.592,335,0.592,336,0.592,337,0.449,338,0.884,339,0.592,340,0.592,341,0.592,342,0.592,343,0.592,344,1.173,345,1.058,346,0.592,347,0.592,348,0.592,349,1.089,350,0.592,351,0.592,352,0.592,353,0.592,354,0.592,355,0.592,356,0.884,357,0.592,358,0.592,359,0.592,360,0.592,361,0.592,362,0.592,363,1.256,364,0.884,365,0.884,366,0.592,367,0.592,368,0.884,369,0.884,370,0.884,371,0.592,372,1.058,373,0.884,374,0.592,375,1.256,376,0.884,377,0.592,378,0.592,379,0.592,380,0.592,381,0.592,382,0.592,383,0.592,384,0.592,385,0.592,386,0.592,387,0.592,388,0.592,389,0.592,390,0.592,391,0.592,392,0.884,393,0.592,394,0.884,395,0.592,396,0.592,397,0.592,398,0.592,399,0.592,400,0.592,401,0.592,402,0.592,403,0.592,404,0.592,405,0.027,406,0.027]],["title/interfaces/DragMoveEvent.html",[0,0.024,65,0.732]],["body/interfaces/DragMoveEvent.html",[0,0.042,1,1.038,2,0.389,3,0.331,4,0.277,5,0.277,6,0.382,7,0.519,10,1.327,11,1.327,12,1.002,13,0.58,14,0.053,15,0.616,16,0.339,17,0.673,18,0.673,19,0.673,20,0.863,21,1.002,22,0.97,23,0.673,24,0.887,25,0.673,26,0.887,27,0.594,28,0.887,29,0.887,30,0.494,31,0.277,32,1.153,33,0.673,34,0.927,35,1.06,36,0.594,37,0.389,38,0.673,39,0.594,40,0.594,41,0.594,42,0.594,43,0.451,44,1.258,45,0.805,46,0.887,47,0.594,48,0.451,49,0.594,50,0.805,51,0.451,52,0.894,53,0.594,54,0.58,55,0.591,56,0.389,57,0.814,58,0.927,59,1.09,60,0.673,61,0.519,62,1.176,63,0.519,64,1.176,65,0.775,66,0.519,67,1.027,68,0.805,69,0.775,70,0.956,71,0.956,72,0.722,73,1.319,74,1.367,75,0.389,76,0.519,77,0.414,78,0.451,79,0.389,80,0.594,81,0.519,82,0.594,83,0.331,84,0.673,85,0.775,86,0.887,87,1.03,88,1.002,89,0.451,90,0.854,91,0.451,92,0.519,93,0.927,94,1.027,95,0.775,96,0.519,97,0.594,98,0.451,99,0.519,100,0.594,101,0.519,102,0.594,103,0.927,104,0.389,105,0.519,106,0.823,107,0.519,108,0.519,109,0.58,110,0.389,111,0.519,112,0.519,113,1.176,114,0.519,115,1.176,116,0.451,117,0.519,118,0.594,119,0.519,120,0.594,121,0.594,122,1.06,123,0.519,124,0.894,125,0.775,126,0.927,127,0.519,128,0.519,129,0.594,130,0.519,131,0.983,132,0.181,133,0.519,134,0.389,135,0.594,136,0.519,137,0.519,138,0.775,139,0.519,140,0.519,141,1.027,142,1.258,143,0.594,144,1.06,145,0.594,146,1.218,147,0.594,148,0.887,149,1.598,150,0.775,151,0.775,152,0.887,153,0.887,154,0.887,155,0.887,156,0.887,157,0.887,158,0.594,159,0.887,160,0.519,161,0.451,162,0.451,163,0.389,164,0.594,165,0.673,166,0.594,167,0.451,168,0.887,169,1.208,170,0.594,171,0.594,172,0.887,173,0.594,174,0.775,175,0.594,176,0.594,177,0.451,178,0.594,179,0.519,180,0.594,181,0.887,182,0.594,183,0.519,184,0.519,185,0.389,186,1.258,187,0.594,188,0.887,189,0.594,190,0.594,191,0.775,192,0.594,193,0.594,194,0.594,195,0.594,196,0.519,197,0.887,198,1.027,199,1.176,200,0.887,201,0.887,202,0.594,203,0.594,204,0.887,205,0.594,206,0.594,207,0.673,208,0.451,209,0.389,210,1.141,211,0.594,212,0.594,213,0.594,214,0.805,215,0.594,216,1.06,217,0.955,218,0.594,219,1.194,220,0.594,221,0.594,222,0.594,223,0.594,224,0.594,225,0.594,226,0.594,227,0.594,228,0.887,229,0.887,230,0.594,231,0.887,232,0.887,233,0.594,234,0.594,235,0.594,236,0.594,237,0.594,238,1.06,239,1.06,240,1.06,241,0.594,242,1.06,243,1.06,244,0.594,245,1.06,246,0.887,247,0.887,248,0.887,249,0.594,250,0.594,251,0.887,252,0.594,253,0.594,254,0.887,255,0.594,256,0.887,257,1.06,258,0.594,259,0.594,260,0.594,261,0.451,262,1.067,263,0.673,264,0.594,265,0.389,266,0.451,267,0.927,268,0.594,269,0.594,270,0.887,271,0.887,272,0.594,273,0.594,274,0.594,275,0.594,276,1.06,277,0.594,278,0.519,279,1.06,280,0.594,281,1.06,282,0.594,283,0.594,284,0.594,285,0.594,286,0.594,287,0.594,288,0.519,289,0.887,290,0.594,291,0.594,292,0.594,293,0.594,294,0.594,295,0.594,296,0.594,297,0.594,298,0.887,299,0.594,300,0.594,301,0.594,302,0.594,303,0.594,304,1.06,305,0.594,306,0.594,307,0.594,308,0.594,309,0.805,310,0.594,311,0.451,312,0.594,313,0.594,314,0.594,315,0.594,316,0.594,317,0.594,318,0.775,319,0.594,320,0.594,321,0.594,322,0.594,323,0.594,324,0.594,325,0.594,326,0.594,327,0.594,328,1.462,329,0.594,330,0.594,331,0.594,332,0.594,333,0.594,334,0.594,335,0.594,336,0.594,337,0.451,338,0.887,339,0.594,340,0.594,341,0.594,342,0.594,343,0.594,344,1.176,345,1.06,346,0.594,347,0.594,348,0.594,349,1.09,350,0.594,351,0.594,352,0.594,353,0.594,354,0.594,355,0.594,356,0.887,357,0.594,358,0.594,359,0.594,360,0.594,361,0.594,362,0.594,363,1.258,364,0.887,365,0.887,366,0.594,367,0.594,368,0.887,369,0.887,370,0.887,371,0.594,372,1.06,373,0.887,374,0.594,375,1.258,376,0.887,377,0.594,378,0.594,379,0.594,380,0.594,381,0.594,382,0.594,383,0.594,384,0.594,385,0.594,386,0.594,387,0.594,388,0.594,389,0.594,390,0.594,391,0.594,392,0.887,393,0.594,394,0.887,395,0.594,396,0.594,397,0.594,398,0.594,399,0.594,400,0.594,401,0.594,402,0.594,403,0.594,404,0.594,405,0.027,406,0.027]],["title/interfaces/DragPointerDownEvent.html",[0,0.024,61,0.732]],["body/interfaces/DragPointerDownEvent.html",[0,0.042,1,1.038,2,0.389,3,0.331,4,0.277,5,0.277,6,0.382,7,0.519,10,1.327,11,1.327,12,1.002,13,0.58,14,0.053,15,0.616,16,0.339,17,0.673,18,0.673,19,0.673,20,0.863,21,1.002,22,0.97,23,0.673,24,0.887,25,0.673,26,0.887,27,0.594,28,0.887,29,0.887,30,0.494,31,0.277,32,1.153,33,0.673,34,0.927,35,1.06,36,0.594,37,0.389,38,0.673,39,0.594,40,0.594,41,0.594,42,0.594,43,0.451,44,1.258,45,0.805,46,0.887,47,0.594,48,0.451,49,0.594,50,0.805,51,0.451,52,0.894,53,0.594,54,0.58,55,0.591,56,0.389,57,0.814,58,0.927,59,1.09,60,0.673,61,0.775,62,1.176,63,0.519,64,1.176,65,0.519,66,0.519,67,1.027,68,0.805,69,0.775,70,0.956,71,0.956,72,0.722,73,1.319,74,1.367,75,0.389,76,0.519,77,0.414,78,0.451,79,0.389,80,0.594,81,0.519,82,0.594,83,0.331,84,0.673,85,0.775,86,0.887,87,1.03,88,1.002,89,0.451,90,0.854,91,0.451,92,0.519,93,0.927,94,1.027,95,0.775,96,0.519,97,0.594,98,0.451,99,0.519,100,0.594,101,0.519,102,0.594,103,0.927,104,0.389,105,0.519,106,0.823,107,0.519,108,0.519,109,0.58,110,0.389,111,0.519,112,0.519,113,1.176,114,0.519,115,1.176,116,0.451,117,0.519,118,0.594,119,0.519,120,0.594,121,0.594,122,1.06,123,0.519,124,0.894,125,0.775,126,0.927,127,0.519,128,0.519,129,0.594,130,0.519,131,0.983,132,0.181,133,0.519,134,0.389,135,0.594,136,0.519,137,0.519,138,0.775,139,0.519,140,0.519,141,1.027,142,1.258,143,0.594,144,1.06,145,0.594,146,1.218,147,0.594,148,0.887,149,1.598,150,0.775,151,0.775,152,0.887,153,0.887,154,0.887,155,0.887,156,0.887,157,0.887,158,0.594,159,0.887,160,0.519,161,0.451,162,0.451,163,0.389,164,0.594,165,0.673,166,0.594,167,0.451,168,0.887,169,1.208,170,0.594,171,0.594,172,0.887,173,0.594,174,0.775,175,0.594,176,0.594,177,0.451,178,0.594,179,0.519,180,0.594,181,0.887,182,0.594,183,0.519,184,0.519,185,0.389,186,1.258,187,0.594,188,0.887,189,0.594,190,0.594,191,0.775,192,0.594,193,0.594,194,0.594,195,0.594,196,0.519,197,0.887,198,1.027,199,1.176,200,0.887,201,0.887,202,0.594,203,0.594,204,0.887,205,0.594,206,0.594,207,0.673,208,0.451,209,0.389,210,1.141,211,0.594,212,0.594,213,0.594,214,0.805,215,0.594,216,1.06,217,0.955,218,0.594,219,1.194,220,0.594,221,0.594,222,0.594,223,0.594,224,0.594,225,0.594,226,0.594,227,0.594,228,0.887,229,0.887,230,0.594,231,0.887,232,0.887,233,0.594,234,0.594,235,0.594,236,0.594,237,0.594,238,1.06,239,1.06,240,1.06,241,0.594,242,1.06,243,1.06,244,0.594,245,1.06,246,0.887,247,0.887,248,0.887,249,0.594,250,0.594,251,0.887,252,0.594,253,0.594,254,0.887,255,0.594,256,0.887,257,1.06,258,0.594,259,0.594,260,0.594,261,0.451,262,1.067,263,0.673,264,0.594,265,0.389,266,0.451,267,0.927,268,0.594,269,0.594,270,0.887,271,0.887,272,0.594,273,0.594,274,0.594,275,0.594,276,1.06,277,0.594,278,0.519,279,1.06,280,0.594,281,1.06,282,0.594,283,0.594,284,0.594,285,0.594,286,0.594,287,0.594,288,0.519,289,0.887,290,0.594,291,0.594,292,0.594,293,0.594,294,0.594,295,0.594,296,0.594,297,0.594,298,0.887,299,0.594,300,0.594,301,0.594,302,0.594,303,0.594,304,1.06,305,0.594,306,0.594,307,0.594,308,0.594,309,0.805,310,0.594,311,0.451,312,0.594,313,0.594,314,0.594,315,0.594,316,0.594,317,0.594,318,0.775,319,0.594,320,0.594,321,0.594,322,0.594,323,0.594,324,0.594,325,0.594,326,0.594,327,0.594,328,1.462,329,0.594,330,0.594,331,0.594,332,0.594,333,0.594,334,0.594,335,0.594,336,0.594,337,0.451,338,0.887,339,0.594,340,0.594,341,0.594,342,0.594,343,0.594,344,1.176,345,1.06,346,0.594,347,0.594,348,0.594,349,1.09,350,0.594,351,0.594,352,0.594,353,0.594,354,0.594,355,0.594,356,0.887,357,0.594,358,0.594,359,0.594,360,0.594,361,0.594,362,0.594,363,1.258,364,0.887,365,0.887,366,0.594,367,0.594,368,0.887,369,0.887,370,0.887,371,0.594,372,1.06,373,0.887,374,0.594,375,1.258,376,0.887,377,0.594,378,0.594,379,0.594,380,0.594,381,0.594,382,0.594,383,0.594,384,0.594,385,0.594,386,0.594,387,0.594,388,0.594,389,0.594,390,0.594,391,0.594,392,0.887,393,0.594,394,0.887,395,0.594,396,0.594,397,0.594,398,0.594,399,0.594,400,0.594,401,0.594,402,0.594,403,0.594,404,0.594,405,0.027,406,0.027]],["title/interfaces/DragStartEvent.html",[0,0.024,63,0.732]],["body/interfaces/DragStartEvent.html",[0,0.042,1,1,2,0.387,3,0.33,4,0.277,5,0.277,6,0.382,7,0.518,8,0.33,9,1.008,10,1.326,11,1.326,12,1,13,0.692,14,0.053,15,0.615,16,0.339,17,0.671,18,0.671,19,0.671,20,0.862,21,1,22,0.97,23,0.671,24,0.884,25,0.671,26,0.884,27,0.592,28,0.884,29,0.884,30,0.493,31,0.277,32,1.151,33,0.671,34,0.925,35,1.256,36,0.592,37,0.387,38,0.671,39,0.592,40,0.592,41,0.592,42,0.592,43,0.45,44,1.256,45,0.803,46,0.884,47,0.592,48,0.45,49,0.592,50,0.803,51,0.45,52,0.893,53,0.592,54,0.578,55,0.59,56,0.387,57,0.814,58,0.925,59,1.089,60,0.671,61,0.518,62,1.058,63,0.773,64,1.365,65,0.518,66,0.518,67,1.026,68,0.803,69,0.773,70,0.955,71,0.955,72,0.721,73,1.318,74,1.365,75,0.387,76,0.518,77,0.413,78,0.45,79,0.387,80,0.592,81,0.518,82,0.592,83,0.33,84,0.671,85,0.773,86,0.884,87,1.03,88,1,89,0.45,90,0.853,91,0.45,92,0.518,93,0.925,94,1.026,95,0.773,96,0.518,97,0.592,98,0.45,99,0.518,100,0.592,101,0.518,102,0.592,103,0.925,104,0.387,105,0.518,106,0.822,107,0.518,108,0.518,109,0.578,110,0.387,111,0.518,112,0.518,113,1.174,114,0.518,115,1.174,116,0.45,117,0.518,118,0.592,119,0.518,120,0.592,121,0.592,122,1.058,123,0.518,124,0.893,125,0.773,126,0.925,127,0.518,128,0.518,129,0.592,130,0.518,131,0.982,132,0.18,133,0.518,134,0.387,135,0.592,136,0.518,137,0.518,138,0.773,139,0.518,140,0.518,141,1.026,142,1.256,143,0.592,144,1.058,145,0.592,146,1.217,147,0.592,148,0.884,149,1.597,150,0.773,151,0.773,152,0.884,153,0.884,154,0.884,155,0.884,156,0.884,157,0.884,158,0.592,159,0.884,160,0.518,161,0.45,162,0.45,163,0.387,164,0.592,165,0.671,166,0.592,167,0.45,168,0.884,169,1.207,170,0.592,171,0.592,172,0.884,173,0.592,174,0.773,175,0.592,176,0.592,177,0.45,178,0.592,179,0.518,180,0.592,181,0.884,182,0.592,183,0.518,184,0.518,185,0.387,186,1.256,187,0.592,188,0.884,189,0.592,190,0.592,191,0.773,192,0.592,193,0.592,194,0.592,195,0.592,196,0.518,197,0.884,198,1.026,199,1.174,200,0.884,201,0.884,202,0.592,203,0.592,204,0.884,205,0.592,206,0.592,207,0.671,208,0.45,209,0.387,210,1.14,211,0.592,212,0.592,213,0.592,214,0.803,215,0.592,216,1.058,217,0.954,218,0.592,219,1.193,220,0.592,221,0.592,222,0.592,223,0.592,224,0.592,225,0.592,226,0.592,227,0.592,228,0.884,229,0.884,230,0.592,231,0.884,232,0.884,233,0.592,234,0.592,235,0.592,236,0.592,237,0.592,238,1.058,239,1.058,240,1.058,241,0.592,242,1.058,243,1.058,244,0.592,245,1.058,246,0.884,247,0.884,248,0.884,249,0.592,250,0.592,251,0.884,252,0.592,253,0.592,254,0.884,255,0.592,256,0.884,257,1.058,258,0.592,259,0.592,260,0.592,261,0.45,262,1.066,263,0.671,264,0.592,265,0.387,266,0.45,267,0.925,268,0.592,269,0.592,270,0.884,271,0.884,272,0.592,273,0.592,274,0.592,275,0.592,276,1.058,277,0.592,278,0.518,279,1.058,280,0.592,281,1.058,282,0.592,283,0.592,284,0.592,285,0.592,286,0.592,287,0.592,288,0.518,289,0.884,290,0.592,291,0.592,292,0.592,293,0.592,294,0.592,295,0.592,296,0.592,297,0.592,298,0.884,299,0.592,300,0.592,301,0.592,302,0.592,303,0.592,304,1.058,305,0.592,306,0.592,307,0.592,308,0.592,309,0.803,310,0.592,311,0.45,312,0.592,313,0.592,314,0.592,315,0.592,316,0.592,317,0.592,318,0.773,319,0.592,320,0.592,321,0.592,322,0.592,323,0.592,324,0.592,325,0.592,326,0.592,327,0.592,328,1.461,329,0.592,330,0.592,331,0.592,332,0.592,333,0.592,334,0.592,335,0.592,336,0.592,337,0.45,338,0.884,339,0.592,340,0.592,341,0.592,342,0.592,343,0.592,344,1.174,345,1.058,346,0.592,347,0.592,348,0.592,349,1.089,350,0.592,351,0.592,352,0.592,353,0.592,354,0.592,355,0.592,356,0.884,357,0.592,358,0.592,359,0.592,360,0.592,361,0.592,362,0.592,363,1.256,364,0.884,365,0.884,366,0.592,367,0.592,368,0.884,369,0.884,370,0.884,371,0.592,372,1.058,373,0.884,374,0.592,375,1.256,376,0.884,377,0.592,378,0.592,379,0.592,380,0.592,381,0.592,382,0.592,383,0.592,384,0.592,385,0.592,386,0.592,387,0.592,388,0.592,389,0.592,390,0.592,391,0.592,392,0.884,393,0.592,394,0.884,395,0.592,396,0.592,397,0.592,398,0.592,399,0.592,400,0.592,401,0.592,402,0.592,403,0.592,404,0.592,405,0.027,406,0.027]],["title/directives/DraggableDirective.html",[16,0.321,78,0.636]],["body/directives/DraggableDirective.html",[0,0.039,1,0.962,2,0.35,3,0.298,4,0.25,5,0.714,6,0.479,7,0.468,8,0.298,10,1.325,11,1.325,12,0.962,13,1.007,14,0.053,15,0.592,16,0.381,17,0.756,18,0.622,19,0.622,20,0.89,21,1.099,22,0.972,23,0.756,24,0.995,25,0.622,26,0.819,27,0.535,28,0.995,29,0.819,30,0.456,31,0.25,32,1.108,33,0.622,34,0.87,35,0.995,36,0.535,37,0.35,38,0.622,39,0.535,40,0.535,41,0.535,42,0.535,43,0.406,44,1.202,45,0.756,46,0.819,47,0.535,48,0.406,49,0.535,50,0.756,51,0.406,52,0.863,53,0.535,54,0.536,55,0.554,56,0.35,57,0.793,58,1.108,59,1.099,60,0.756,61,0.468,62,0.995,63,0.468,64,1.115,65,0.468,66,0.468,67,0.974,68,0.962,69,0.716,70,0.931,71,0.931,72,0.739,73,1.268,74,1.319,75,0.536,76,0.716,77,0.465,78,0.622,79,0.536,80,0.819,81,0.716,82,0.819,83,0.456,84,0.847,85,0.974,86,1.115,87,1.07,88,1.081,89,0.622,90,0.899,91,0.622,92,0.87,93,1.108,94,1.189,95,1.05,96,0.716,97,0.995,98,0.622,99,0.716,100,0.819,101,0.716,102,0.819,103,0.974,104,0.536,105,0.87,106,0.863,107,0.716,108,0.716,109,0.729,110,0.651,111,0.716,112,1.153,113,1.202,114,0.87,115,1.202,116,0.622,117,0.716,118,0.819,119,0.716,120,0.819,121,0.819,122,1.115,123,0.87,124,0.983,125,0.974,126,1.05,127,0.716,128,0.716,129,0.819,130,0.87,131,0.96,132,0.249,133,0.716,134,0.536,135,0.819,136,0.716,137,0.716,138,0.974,139,0.716,140,0.87,141,1.108,142,1.202,143,0.535,144,0.995,145,0.535,146,1.201,147,0.535,148,0.819,149,1.576,150,0.716,151,0.716,152,0.819,153,0.819,154,0.819,155,0.819,156,0.819,157,0.819,158,0.535,159,0.819,160,0.468,161,0.406,162,0.406,163,0.35,164,0.535,165,0.622,166,0.535,167,0.406,168,0.819,169,1.19,170,0.535,171,0.535,172,0.819,173,0.535,174,0.716,175,0.535,176,0.535,177,0.406,178,0.535,179,0.468,180,0.535,181,0.819,182,0.535,183,0.468,184,0.468,185,0.35,186,1.202,187,0.535,188,0.819,189,0.535,190,0.535,191,0.716,192,0.535,193,0.535,194,0.535,195,0.535,196,0.468,197,0.819,198,0.974,199,1.115,200,0.819,201,0.819,202,0.535,203,0.535,204,0.819,205,0.535,206,0.535,207,0.622,208,0.406,209,0.35,210,1.115,211,0.535,212,0.535,213,0.535,214,0.756,215,0.535,216,0.995,217,0.912,218,0.535,219,1.153,220,0.535,221,0.535,222,0.535,223,0.535,224,0.535,225,0.535,226,0.535,227,0.535,228,0.819,229,0.819,230,0.535,231,0.819,232,0.819,233,0.535,234,0.535,235,0.535,236,0.535,237,0.535,238,0.995,239,0.995,240,0.995,241,0.535,242,0.995,243,0.995,244,0.535,245,0.995,246,0.819,247,0.819,248,0.819,249,0.535,250,0.535,251,0.819,252,0.535,253,0.535,254,0.819,255,0.535,256,0.819,257,0.995,258,0.535,259,0.535,260,0.535,261,0.406,262,1.033,263,0.622,264,0.535,265,0.35,266,0.406,267,0.87,268,0.535,269,0.535,270,0.819,271,0.819,272,0.535,273,0.535,274,0.535,275,0.535,276,0.995,277,0.535,278,0.468,279,0.995,280,0.535,281,0.995,282,0.535,283,0.535,284,0.535,285,0.535,286,0.535,287,0.535,288,0.468,289,0.819,290,0.535,291,0.535,292,0.535,293,0.535,294,0.535,295,0.535,296,0.535,297,0.535,298,0.819,299,0.535,300,0.535,301,0.535,302,0.535,303,0.535,304,0.995,305,0.535,306,0.535,307,0.535,308,0.535,309,0.756,310,0.535,311,0.406,312,0.535,313,0.535,314,0.535,315,0.535,316,0.535,317,0.535,318,1.153,319,0.535,320,0.535,321,0.535,322,0.535,323,0.535,324,0.535,325,0.535,326,0.535,327,0.535,328,1.423,329,0.535,330,0.535,331,0.535,332,0.535,333,0.535,334,0.535,335,0.535,336,0.535,337,0.406,338,0.819,339,0.535,340,0.535,341,0.535,342,0.535,343,0.535,344,1.115,345,0.995,346,0.535,347,0.535,348,0.535,349,1.059,350,0.535,351,0.535,352,0.535,353,0.535,354,0.535,355,0.535,356,0.819,357,0.535,358,0.535,359,0.535,360,0.535,361,0.535,362,0.535,363,1.202,364,0.819,365,0.819,366,0.535,367,0.535,368,0.819,369,0.819,370,0.819,371,0.535,372,0.995,373,0.819,374,0.535,375,1.202,376,0.819,377,0.535,378,0.535,379,0.535,380,0.535,381,0.535,382,0.535,383,0.535,384,0.535,385,0.535,386,0.535,387,0.535,388,0.535,389,0.535,390,0.535,391,0.535,392,0.819,393,0.535,394,0.819,395,0.535,396,0.535,397,0.535,398,0.535,399,0.535,400,0.535,401,0.535,402,0.535,403,0.535,404,0.535,405,0.025,406,0.025,416,1.436,417,4.069,418,1.781,419,1.781,420,1.781,421,1.781,422,1.781,423,1.781,424,1.781,425,1.781,426,1.781,427,1.781,428,1.781,429,1.781,430,1.781,431,1.781,432,1.781]],["title/interfaces/DropEvent.html",[0,0.024,433,2.248]],["body/interfaces/DropEvent.html",[0,0.028,2,0.626,3,0.533,4,0.447,5,0.447,6,0.481,8,0.533,9,1.409,12,0.938,13,0.626,14,0.053,15,0.699,16,0.473,17,0.938,18,0.938,19,0.938,20,1.003,21,1.137,22,0.895,23,0.938,25,0.938,30,0.688,31,0.447,37,0.808,38,0.938,43,0.938,45,0.726,48,0.726,50,1.039,51,0.726,54,0.808,55,0.688,56,0.626,57,0.533,59,1.039,70,1.003,71,0.98,72,0.447,75,0.626,77,0.447,79,0.626,83,0.688,84,1.224,87,1.073,88,1.039,90,0.762,98,0.938,106,0.808,109,0.626,110,0.626,124,0.946,131,0.946,132,0.291,134,0.626,146,1.137,161,0.726,162,0.726,163,0.626,165,0.726,167,0.726,169,1.137,177,0.726,207,0.938,208,0.726,209,0.626,210,1.039,214,0.726,217,1.098,261,0.938,262,1.137,263,0.938,265,0.808,266,0.726,309,0.938,311,1.039,337,0.726,349,0.726,405,0.038,406,0.038,412,1.858,433,2.566,434,2.161,435,3.673,436,3.315,437,2.566,438,1.616,439,3.092,440,4.019,441,2.566,442,2.566,443,2.161,444,2.791,445,2.791,446,2.161,447,2.566,448,3.673,449,2.566,450,2.566,451,2.566,452,2.566,453,2.566,454,2.161,455,2.161,456,2.566,457,3.315,458,2.566,459,2.566,460,3.315,461,2.566,462,3.315,463,3.673,464,4.116,465,2.566,466,3.315,467,3.673,468,2.566,469,3.673,470,3.673,471,2.566,472,3.882,473,2.566,474,2.161,475,2.566,476,2.161,477,2.566,478,2.566,479,2.566,480,3.673,481,3.673,482,2.566,483,2.566,484,2.566,485,2.566,486,2.566,487,2.566,488,2.566,489,2.566,490,2.161,491,2.566,492,2.566]],["title/directives/DroppableDirective.html",[16,0.321,412,1.627]],["body/directives/DroppableDirective.html",[2,0.575,3,0.489,4,0.41,5,0.734,6,0.507,8,0.489,9,1.332,12,0.887,13,1.016,14,0.053,15,0.681,16,0.503,17,0.997,18,1.063,19,1.063,20,1.016,21,1.194,22,0.953,23,0.997,25,1.063,30,0.731,31,0.41,37,0.764,38,0.887,43,0.887,45,0.667,48,0.667,50,1.161,51,0.667,54,0.916,55,0.651,56,0.575,57,0.489,59,0.997,70,0.98,71,0.953,72,0.681,75,0.764,77,0.41,79,0.764,83,0.812,84,1.161,87,1.1,88,0.997,90,0.812,98,0.887,106,0.916,109,0.764,110,0.859,124,1.016,131,0.916,132,0.355,134,0.764,146,1.106,161,0.887,162,0.997,163,0.859,165,0.997,167,0.667,169,1.106,177,0.887,207,0.887,208,0.667,209,0.575,210,0.997,214,0.667,217,1.063,261,0.887,262,1.106,263,0.887,265,0.764,266,0.667,309,0.887,311,0.997,337,0.667,349,0.667,405,0.036,406,0.036,412,2.269,416,2.357,417,4.168,434,1.984,435,2.357,436,3.756,437,2.357,438,1.484,439,2.966,440,3.91,441,2.357,442,2.357,443,2.64,444,3.162,445,3.162,446,2.966,447,3.135,448,3.91,449,3.523,450,3.523,451,3.523,452,2.357,453,2.357,454,2.64,455,1.984,456,3.756,457,3.135,458,2.357,459,2.357,460,3.135,461,2.357,462,3.135,463,3.523,464,4.021,465,2.357,466,3.135,467,3.523,468,2.357,469,3.523,470,3.523,471,2.357,472,3.756,473,2.357,474,1.984,475,2.357,476,1.984,477,2.357,478,2.357,479,2.357,480,3.523,481,3.523,482,2.357,483,2.357,484,2.357,485,2.357,486,2.357,487,2.357,488,2.357,489,2.357,490,1.984,491,2.357,492,2.357,493,2.922,494,3.888,495,2.357,496,2.922,497,2.922,498,2.922,499,2.922,500,2.922,501,2.922]],["title/interfaces/PointerEvent.html",[0,0.024,69,0.732]],["body/interfaces/PointerEvent.html",[0,0.042,1,0.998,2,0.384,3,0.327,4,0.274,5,0.274,6,0.381,7,0.514,8,0.327,9,1.003,10,1.324,11,1.324,12,1.107,13,0.819,14,0.053,15,0.614,16,0.337,17,0.668,18,0.668,19,0.668,20,0.859,21,0.998,22,0.968,23,0.668,24,0.88,25,0.668,26,0.88,27,0.588,28,0.88,29,0.88,30,0.49,31,0.274,32,1.148,33,0.668,34,0.921,35,1.054,36,0.588,37,0.384,38,0.668,39,0.588,40,0.588,41,0.588,42,0.588,43,0.446,44,1.252,45,0.8,46,0.88,47,0.588,48,0.446,49,0.588,50,0.8,51,0.446,52,0.891,53,0.588,54,0.575,55,0.587,56,0.384,57,0.812,58,0.921,59,1.087,60,0.668,61,0.514,62,1.054,63,0.514,64,1.17,65,0.514,66,0.514,67,1.022,68,0.8,69,0.921,70,0.991,71,0.991,72,0.735,73,1.401,74,1.432,75,0.384,76,0.514,77,0.411,78,0.446,79,0.384,80,0.588,81,0.514,82,0.588,83,0.327,84,0.668,85,0.769,86,0.88,87,1.029,88,0.998,89,0.446,90,0.852,91,0.446,92,0.514,93,0.921,94,1.022,95,0.769,96,0.514,97,0.588,98,0.446,99,0.514,100,0.588,101,0.514,102,0.588,103,0.921,104,0.384,105,0.514,106,0.819,107,0.514,108,0.514,109,0.575,110,0.384,111,0.514,112,0.514,113,1.17,114,0.514,115,1.17,116,0.446,117,0.514,118,0.588,119,0.514,120,0.588,121,0.588,122,1.054,123,0.514,124,0.891,125,0.769,126,0.921,127,0.514,128,0.514,129,0.588,130,0.514,131,0.981,132,0.179,133,0.514,134,0.384,135,0.588,136,0.514,137,0.514,138,0.769,139,0.514,140,0.514,141,1.022,142,1.252,143,0.588,144,1.054,145,0.588,146,1.216,147,0.588,148,0.88,149,1.596,150,0.769,151,0.769,152,0.88,153,0.88,154,0.88,155,0.88,156,0.88,157,0.88,158,0.588,159,0.88,160,0.514,161,0.446,162,0.446,163,0.384,164,0.588,165,0.668,166,0.588,167,0.446,168,0.88,169,1.206,170,0.588,171,0.588,172,0.88,173,0.588,174,0.769,175,0.588,176,0.588,177,0.446,178,0.588,179,0.514,180,0.588,181,0.88,182,0.588,183,0.514,184,0.514,185,0.384,186,1.252,187,0.588,188,0.88,189,0.588,190,0.588,191,0.769,192,0.588,193,0.588,194,0.588,195,0.588,196,0.514,197,0.88,198,1.022,199,1.17,200,0.88,201,0.88,202,0.588,203,0.588,204,0.88,205,0.588,206,0.588,207,0.668,208,0.446,209,0.384,210,1.138,211,0.588,212,0.588,213,0.588,214,0.8,215,0.588,216,1.054,217,0.951,218,0.588,219,1.19,220,0.588,221,0.588,222,0.588,223,0.588,224,0.588,225,0.588,226,0.588,227,0.588,228,0.88,229,0.88,230,0.588,231,0.88,232,0.88,233,0.588,234,0.588,235,0.588,236,0.588,237,0.588,238,1.054,239,1.054,240,1.054,241,0.588,242,1.054,243,1.054,244,0.588,245,1.054,246,0.88,247,0.88,248,0.88,249,0.588,250,0.588,251,0.88,252,0.588,253,0.588,254,0.88,255,0.588,256,0.88,257,1.054,258,0.588,259,0.588,260,0.588,261,0.446,262,1.063,263,0.668,264,0.588,265,0.384,266,0.446,267,0.921,268,0.588,269,0.588,270,0.88,271,0.88,272,0.588,273,0.588,274,0.588,275,0.588,276,1.054,277,0.588,278,0.514,279,1.054,280,0.588,281,1.054,282,0.588,283,0.588,284,0.588,285,0.588,286,0.588,287,0.588,288,0.514,289,0.88,290,0.588,291,0.588,292,0.588,293,0.588,294,0.588,295,0.588,296,0.588,297,0.588,298,0.88,299,0.588,300,0.588,301,0.588,302,0.588,303,0.588,304,1.054,305,0.588,306,0.588,307,0.588,308,0.588,309,0.8,310,0.588,311,0.446,312,0.588,313,0.588,314,0.588,315,0.588,316,0.588,317,0.588,318,0.769,319,0.588,320,0.588,321,0.588,322,0.588,323,0.588,324,0.588,325,0.588,326,0.588,327,0.588,328,1.458,329,0.588,330,0.588,331,0.588,332,0.588,333,0.588,334,0.588,335,0.588,336,0.588,337,0.446,338,0.88,339,0.588,340,0.588,341,0.588,342,0.588,343,0.588,344,1.17,345,1.054,346,0.588,347,0.588,348,0.588,349,1.087,350,0.588,351,0.588,352,0.588,353,0.588,354,0.588,355,0.588,356,0.88,357,0.588,358,0.588,359,0.588,360,0.588,361,0.588,362,0.588,363,1.252,364,0.88,365,0.88,366,0.588,367,0.588,368,0.88,369,0.88,370,0.88,371,0.588,372,1.054,373,0.88,374,0.588,375,1.252,376,0.88,377,0.588,378,0.588,379,0.588,380,0.588,381,0.588,382,0.588,383,0.588,384,0.588,385,0.588,386,0.588,387,0.588,388,0.588,389,0.588,390,0.588,391,0.588,392,0.88,393,0.588,394,0.88,395,0.588,396,0.588,397,0.588,398,0.588,399,0.588,400,0.588,401,0.588,402,0.588,403,0.588,404,0.588,405,0.027,406,0.027]],["title/interfaces/SnapGrid.html",[0,0.024,60,0.636]],["body/interfaces/SnapGrid.html",[0,0.042,1,0.999,2,0.386,3,0.328,4,0.275,5,0.275,6,0.381,7,0.515,8,0.328,9,1.005,10,1.359,11,1.359,12,1.108,13,0.766,14,0.053,15,0.614,16,0.337,17,0.669,18,0.669,19,0.669,20,0.86,21,0.999,22,0.969,23,0.669,24,0.881,25,0.669,26,0.881,27,0.59,28,0.881,29,0.881,30,0.733,31,0.275,32,1.149,33,0.669,34,0.922,35,1.056,36,0.59,37,0.386,38,0.669,39,0.59,40,0.59,41,0.59,42,0.59,43,0.448,44,1.254,45,0.801,46,0.881,47,0.59,48,0.448,49,0.59,50,0.801,51,0.448,52,0.892,53,0.59,54,0.576,55,0.588,56,0.386,57,0.813,58,0.922,59,1.088,60,0.801,61,0.515,62,1.056,63,0.515,64,1.171,65,0.515,66,0.515,67,1.023,68,0.801,69,0.77,70,0.954,71,0.954,72,0.721,73,1.315,74,1.363,75,0.386,76,0.515,77,0.412,78,0.448,79,0.386,80,0.59,81,0.515,82,0.59,83,0.328,84,0.669,85,0.77,86,0.881,87,1.029,88,0.999,89,0.448,90,0.853,91,0.448,92,0.515,93,0.922,94,1.023,95,0.77,96,0.515,97,0.59,98,0.448,99,0.515,100,0.59,101,0.515,102,0.59,103,0.922,104,0.386,105,0.515,106,0.82,107,0.515,108,0.515,109,0.576,110,0.386,111,0.515,112,0.515,113,1.171,114,0.515,115,1.171,116,0.448,117,0.515,118,0.59,119,0.515,120,0.59,121,0.59,122,1.056,123,0.515,124,0.892,125,0.77,126,0.922,127,0.515,128,0.515,129,0.59,130,0.515,131,0.981,132,0.179,133,0.515,134,0.386,135,0.59,136,0.515,137,0.515,138,0.77,139,0.515,140,0.515,141,1.023,142,1.254,143,0.59,144,1.056,145,0.59,146,1.216,147,0.59,148,0.881,149,1.596,150,0.77,151,0.77,152,0.881,153,0.881,154,0.881,155,0.881,156,0.881,157,0.881,158,0.59,159,0.881,160,0.515,161,0.448,162,0.448,163,0.386,164,0.59,165,0.669,166,0.59,167,0.448,168,0.881,169,1.207,170,0.59,171,0.59,172,0.881,173,0.59,174,0.77,175,0.59,176,0.59,177,0.448,178,0.59,179,0.515,180,0.59,181,0.881,182,0.59,183,0.515,184,0.515,185,0.386,186,1.254,187,0.59,188,0.881,189,0.59,190,0.59,191,0.77,192,0.59,193,0.59,194,0.59,195,0.59,196,0.515,197,0.881,198,1.023,199,1.171,200,0.881,201,0.881,202,0.59,203,0.59,204,0.881,205,0.59,206,0.59,207,0.669,208,0.448,209,0.386,210,1.139,211,0.59,212,0.59,213,0.59,214,0.801,215,0.59,216,1.056,217,0.952,218,0.59,219,1.191,220,0.59,221,0.59,222,0.59,223,0.59,224,0.59,225,0.59,226,0.59,227,0.59,228,0.881,229,0.881,230,0.59,231,0.881,232,0.881,233,0.59,234,0.59,235,0.59,236,0.59,237,0.59,238,1.056,239,1.056,240,1.056,241,0.59,242,1.056,243,1.056,244,0.59,245,1.056,246,0.881,247,0.881,248,0.881,249,0.59,250,0.59,251,0.881,252,0.59,253,0.59,254,0.881,255,0.59,256,0.881,257,1.056,258,0.59,259,0.59,260,0.59,261,0.448,262,1.064,263,0.669,264,0.59,265,0.386,266,0.448,267,0.922,268,0.59,269,0.59,270,0.881,271,0.881,272,0.59,273,0.59,274,0.59,275,0.59,276,1.056,277,0.59,278,0.515,279,1.056,280,0.59,281,1.056,282,0.59,283,0.59,284,0.59,285,0.59,286,0.59,287,0.59,288,0.515,289,0.881,290,0.59,291,0.59,292,0.59,293,0.59,294,0.59,295,0.59,296,0.59,297,0.59,298,0.881,299,0.59,300,0.59,301,0.59,302,0.59,303,0.59,304,1.056,305,0.59,306,0.59,307,0.59,308,0.59,309,0.801,310,0.59,311,0.448,312,0.59,313,0.59,314,0.59,315,0.59,316,0.59,317,0.59,318,0.77,319,0.59,320,0.59,321,0.59,322,0.59,323,0.59,324,0.59,325,0.59,326,0.59,327,0.59,328,1.459,329,0.59,330,0.59,331,0.59,332,0.59,333,0.59,334,0.59,335,0.59,336,0.59,337,0.448,338,0.881,339,0.59,340,0.59,341,0.59,342,0.59,343,0.59,344,1.171,345,1.056,346,0.59,347,0.59,348,0.59,349,1.088,350,0.59,351,0.59,352,0.59,353,0.59,354,0.59,355,0.59,356,0.881,357,0.59,358,0.59,359,0.59,360,0.59,361,0.59,362,0.59,363,1.254,364,0.881,365,0.881,366,0.59,367,0.59,368,0.881,369,0.881,370,0.881,371,0.59,372,1.056,373,0.881,374,0.59,375,1.254,376,0.881,377,0.59,378,0.59,379,0.59,380,0.59,381,0.59,382,0.59,383,0.59,384,0.59,385,0.59,386,0.59,387,0.59,388,0.59,389,0.59,390,0.59,391,0.59,392,0.881,393,0.59,394,0.881,395,0.59,396,0.59,397,0.59,398,0.59,399,0.59,400,0.59,401,0.59,402,0.59,403,0.59,404,0.59,405,0.027,406,0.027]],["title/changelog.html",[132,0.214,185,0.461,502,2.347]],["body/changelog.html",[0,0.021,1,0.551,4,0.339,6,0.508,8,0.571,10,0.634,11,0.634,14,0.036,15,0.479,16,0.455,20,0.777,22,0.777,30,0.81,33,0.778,37,0.845,52,0.475,55,0.81,57,0.404,60,0.98,67,0.634,68,0.902,72,0.756,76,0.634,77,0.555,79,0.67,83,0.719,85,0.634,87,1.092,89,0.778,90,0.941,91,0.778,92,0.896,93,0.634,94,1.297,95,0.634,96,1.039,99,1.365,101,1.129,103,1.27,104,0.971,105,0.896,107,1.039,108,0.896,109,0.925,110,0.67,111,0.634,112,1.129,114,0.634,116,0.551,119,0.634,123,0.634,124,0.67,126,0.896,127,1.039,128,0.634,130,0.634,131,0.67,132,0.312,133,0.634,134,0.951,136,0.634,138,0.896,139,1.129,140,0.634,141,1.039,150,0.634,151,0.634,160,0.896,163,0.475,174,1.425,179,0.634,183,0.896,184,0.896,191,1.129,196,0.634,198,0.896,209,0.777,219,0.634,267,0.634,278,1.039,288,0.634,318,0.634,405,0.031,406,0.031,407,1.515,408,2.181,443,1.639,444,1.639,445,1.639,446,1.639,455,1.639,474,1.639,476,1.639,490,2.315,503,5.24,504,2.414,505,2.414,506,2.414,507,2.414,508,2.414,509,2.414,510,2.414,511,3.655,512,4.704,513,4.297,514,5.386,515,1.947,516,2.414,517,2.414,518,1.947,519,2.414,520,2.414,521,3.41,522,4.297,523,2.414,524,5.425,525,2.414,526,2.414,527,2.414,528,3.41,529,3.41,530,1.947,531,2.414,532,2.414,533,3.41,534,2.414,535,2.414,536,3.41,537,5.148,538,2.414,539,3.41,540,2.414,541,2.414,542,2.414,543,2.414,544,3.41,545,2.414,546,3.189,547,4.297,548,3.983,549,1.639,550,1.947,551,2.414,552,3.41,553,2.414,554,2.414,555,2.414,556,3.954,557,2.414,558,2.414,559,2.414,560,3.41,561,3.41,562,2.414,563,2.414,564,3.41,565,2.75,566,3.41,567,3.41,568,2.414,569,2.414,570,2.414,571,2.414,572,2.414,573,2.414,574,4.704,575,2.414,576,2.414,577,2.414,578,2.414,579,2.414,580,3.41,581,3.41,582,2.414,583,2.414,584,2.414,585,4.152,586,5.197,587,2.414,588,2.414,589,2.414,590,2.414,591,2.414,592,2.414,593,2.414,594,3.41,595,2.414,596,3.954,597,2.414,598,1.947,599,2.414,600,2.414,601,2.414,602,3.41,603,4.297,604,2.414,605,3.954,606,3.954,607,2.414,608,4.297,609,3.189,610,2.414,611,2.414,612,2.414,613,2.414,614,2.414,615,2.414,616,2.414,617,4.939,618,3.954,619,2.414,620,4.939,621,4.297,622,2.414,623,2.414,624,1.947,625,2.414,626,3.41,627,2.414,628,2.414,629,3.41,630,2.414,631,2.414,632,2.414,633,3.41,634,3.41,635,2.414,636,2.414,637,2.414,638,2.414,639,2.414,640,4.297,641,4.152,642,4.297,643,2.414,644,2.414,645,4.297,646,4.297,647,3.189,648,2.414,649,5.148,650,5.148,651,2.414,652,3.41,653,3.41,654,2.414,655,3.954,656,2.414,657,4.297,658,2.414,659,2.414,660,3.41,661,2.414,662,2.414,663,2.414,664,2.414,665,2.414,666,2.414,667,2.414,668,2.414,669,2.414,670,2.414,671,2.414,672,2.414,673,2.414,674,1.947,675,2.414,676,2.414,677,2.414,678,2.414,679,2.414,680,2.414,681,4.297,682,2.75,683,2.308,684,2.414,685,2.414,686,2.414,687,2.414,688,2.414,689,2.414,690,2.414,691,2.414,692,4.297,693,2.414,694,2.414,695,2.414,696,2.414,697,4.532,698,2.414,699,3.41,700,3.954,701,2.414,702,2.414,703,1.947,704,2.414,705,2.414,706,3.41,707,3.954,708,2.414,709,2.414,710,3.41,711,2.414,712,2.414,713,1.947,714,2.414,715,2.414,716,2.414,717,2.414,718,2.414,719,1.947,720,2.414,721,2.414,722,2.414,723,2.414,724,2.414,725,5.091,726,3.41,727,2.414,728,2.414,729,3.954,730,2.414,731,2.414,732,2.414,733,2.414,734,2.414,735,2.414,736,2.414,737,2.414,738,3.954,739,2.414,740,2.414,741,2.414,742,2.414,743,2.414,744,2.414,745,3.41,746,2.414,747,2.414,748,2.414,749,2.414,750,2.414,751,2.414,752,2.414,753,2.414,754,3.954,755,2.414,756,2.414,757,1.947,758,2.414,759,2.414,760,2.414,761,1.947,762,3.41,763,2.414,764,2.414,765,2.414,766,2.414,767,2.414,768,2.414,769,2.414,770,2.414,771,2.414,772,2.414,773,2.414,774,2.414,775,2.414,776,2.414,777,2.414,778,1.947,779,2.414,780,2.414,781,2.414,782,2.414,783,2.414,784,2.414,785,1.947,786,2.414,787,2.414,788,1.947,789,2.414,790,2.414,791,2.414,792,2.414]],["title/dependencies.html",[647,1.893,683,1.951]],["body/dependencies.html",[14,0.048,31,0.62,405,0.046,406,0.046,682,3.565,683,2.58,793,4.42]],["title/miscellaneous/functions.html",[438,1.697,794,1.37]],["body/miscellaneous/functions.html",[5,0.611,6,0.398,8,0.729,14,0.048,30,0.729,70,0.855,71,0.978,265,0.978,405,0.045,406,0.045,434,2.955,438,2.209,439,3.378,454,2.955,495,3.509,794,2.54,795,4.352,796,4.352,797,5.224]],["title/index.html",[8,0.393,132,0.214,185,0.461]],["body/index.html",[3,0.77,6,0.469,14,0.051,15,0.694,31,0.535,33,0.869,52,0.972,72,0.535,75,0.749,77,0.646,81,1,83,0.912,89,0.869,90,0.912,91,0.869,104,0.904,106,0.749,116,0.869,117,1,125,1,132,0.42,137,1,405,0.042,406,0.042,408,2.335,411,3.071,413,3.709,518,4.394,530,3.071,546,3.071,548,3.709,549,2.586,550,3.709,585,3.071,598,3.071,609,3.071,624,3.709,641,4.306,674,3.709,683,2.223,703,3.709,713,3.071,719,4.306,757,3.709,778,3.709,798,4.6,799,4.942,800,4.6,801,3.809,802,5.401,803,5.133,804,2.586,805,3.809,806,3.809,807,3.809,808,3.809,809,4.942,810,3.809,811,3.809,812,4.942,813,3.809,814,4.6,815,3.809,816,3.809,817,3.809,818,3.809,819,3.809,820,3.809,821,3.809,822,3.809,823,3.809,824,3.809,825,3.809,826,3.809,827,3.809,828,3.809,829,3.809,830,3.809,831,3.809,832,3.809,833,3.809,834,3.809,835,4.6,836,3.809,837,3.809,838,3.809,839,5.255,840,3.809,841,3.809,842,3.809,843,3.809,844,3.071]],["title/license.html",[132,0.214,185,0.461,804,1.593]],["body/license.html",[4,0.573,14,0.044,32,1.072,34,1.072,52,0.803,72,0.573,104,0.942,405,0.044,406,0.044,511,3.293,515,4.105,549,2.772,565,3.293,804,2.772,844,3.866,845,5.09,846,4.083,847,4.083,848,4.083,849,4.794,850,4.083,851,4.083,852,4.083,853,4.083,854,4.794,855,4.083,856,5.252,857,5.546,858,4.083,859,4.794,860,5.09,861,4.083,862,4.794,863,4.083,864,4.083,865,4.083,866,4.083,867,4.083,868,4.083,869,4.083,870,4.083,871,4.083,872,4.083,873,4.083,874,4.083,875,4.794,876,4.794,877,4.083,878,4.083,879,4.794,880,4.083,881,4.083,882,4.083,883,4.083,884,4.083,885,4.083,886,4.083,887,4.083,888,4.083,889,4.083,890,4.083,891,4.083,892,4.083,893,4.083,894,4.083,895,4.083,896,4.083,897,4.083,898,4.083,899,4.083,900,4.083]],["title/modules.html",[407,1.674]],["body/modules.html",[14,0.046,405,0.046,406,0.046,407,1.968,408,2.248,901,4.429]],["title/overview.html",[902,3.038]],["body/overview.html",[0,0.038,14,0.046,16,0.508,405,0.046,406,0.046,407,1.961,761,3.558,785,3.558,788,3.558,902,3.558]],["title/miscellaneous/typealiases.html",[794,1.37,903,3.343]],["body/miscellaneous/typealiases.html",[5,0.616,6,0.401,7,1.154,8,0.735,13,0.863,14,0.046,68,1.196,405,0.046,406,0.046,438,2.23,794,2.564,904,4.392,905,4.392]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":219,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["0.1.0",{"_index":775,"title":{},"body":{"changelog.html":{}}}],["0.1.1",{"_index":773,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":750,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":743,"title":{},"body":{"changelog.html":{}}}],["0.2.2",{"_index":741,"title":{},"body":{"changelog.html":{}}}],["0.2.3",{"_index":737,"title":{},"body":{"changelog.html":{}}}],["0.3.0",{"_index":735,"title":{},"body":{"changelog.html":{}}}],["0.3.1",{"_index":732,"title":{},"body":{"changelog.html":{}}}],["0.4.0",{"_index":728,"title":{},"body":{"changelog.html":{}}}],["0.5.0",{"_index":724,"title":{},"body":{"changelog.html":{}}}],["0.5.1",{"_index":722,"title":{},"body":{"changelog.html":{}}}],["0.5.2",{"_index":715,"title":{},"body":{"changelog.html":{}}}],["0.5.3",{"_index":712,"title":{},"body":{"changelog.html":{}}}],["0.5.4",{"_index":709,"title":{},"body":{"changelog.html":{}}}],["0.6.0",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["00f6989",{"_index":727,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":521,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["06396e6",{"_index":563,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":527,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":512,"title":{},"body":{"changelog.html":{}}}],["0a95ac7",{"_index":577,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":788,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["1.0.0",{"_index":696,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":688,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":680,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":681,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":738,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["1265bee",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["16a3df8",{"_index":792,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["17a2ccc",{"_index":714,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":513,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":785,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["2.0.0",{"_index":648,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["2016",{"_index":725,"title":{},"body":{"changelog.html":{}}}],["2017",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":511,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["21",{"_index":655,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["222914b",{"_index":753,"title":{},"body":{"changelog.html":{}}}],["22530b9",{"_index":597,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":580,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":698,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":535,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["26cfa7e",{"_index":734,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":776,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":554,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":528,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":791,"title":{},"body":{"changelog.html":{}}}],["3.0.0",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["3.0.1",{"_index":632,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":589,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":637,"title":{},"body":{"changelog.html":{}}}],["3445337",{"_index":751,"title":{},"body":{"changelog.html":{}}}],["38fd4b5",{"_index":784,"title":{},"body":{"changelog.html":{}}}],["3c99d40",{"_index":711,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":700,"title":{},"body":{"changelog.html":{}}}],["4.0",{"_index":702,"title":{},"body":{"changelog.html":{}}}],["4.0.0",{"_index":526,"title":{},"body":{"changelog.html":{}}}],["4.0.1",{"_index":520,"title":{},"body":{"changelog.html":{}}}],["4.0.2",{"_index":510,"title":{},"body":{"changelog.html":{}}}],["4159ce2",{"_index":658,"title":{},"body":{"changelog.html":{}}}],["42631bc",{"_index":701,"title":{},"body":{"changelog.html":{}}}],["44",{"_index":541,"title":{},"body":{"changelog.html":{}}}],["44ea67",{"_index":723,"title":{},"body":{"changelog.html":{}}}],["45c6b5f",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["48d4fe6",{"_index":568,"title":{},"body":{"changelog.html":{}}}],["4a58c61",{"_index":666,"title":{},"body":{"changelog.html":{}}}],["4c9224b",{"_index":551,"title":{},"body":{"changelog.html":{}}}],["4f23661",{"_index":542,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":657,"title":{},"body":{"changelog.html":{}}}],["5.5.x",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["50d1962",{"_index":760,"title":{},"body":{"changelog.html":{}}}],["52e9a22",{"_index":742,"title":{},"body":{"changelog.html":{}}}],["538f9b7",{"_index":588,"title":{},"body":{"changelog.html":{}}}],["566bf78",{"_index":531,"title":{},"body":{"changelog.html":{}}}],["57dd436",{"_index":664,"title":{},"body":{"changelog.html":{}}}],["5995f81",{"_index":592,"title":{},"body":{"changelog.html":{}}}],["5aca67d",{"_index":730,"title":{},"body":{"changelog.html":{}}}],["5ae52a7",{"_index":604,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["6.0",{"_index":798,"title":{},"body":{"index.html":{}}}],["6.0.0",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["6016f12",{"_index":787,"title":{},"body":{"changelog.html":{}}}],["61",{"_index":525,"title":{},"body":{"changelog.html":{}}}],["652d632",{"_index":756,"title":{},"body":{"changelog.html":{}}}],["67d3a5e",{"_index":553,"title":{},"body":{"changelog.html":{}}}],["6e0a1a3",{"_index":534,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":764,"title":{},"body":{"changelog.html":{}}}],["700fef1",{"_index":523,"title":{},"body":{"changelog.html":{}}}],["709327c",{"_index":790,"title":{},"body":{"changelog.html":{}}}],["710c7f7",{"_index":779,"title":{},"body":{"changelog.html":{}}}],["729f24e",{"_index":755,"title":{},"body":{"changelog.html":{}}}],["73d65d7",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["7476301",{"_index":749,"title":{},"body":{"changelog.html":{}}}],["76852bc",{"_index":591,"title":{},"body":{"changelog.html":{}}}],["7831903",{"_index":740,"title":{},"body":{"changelog.html":{}}}],["7d859c1",{"_index":695,"title":{},"body":{"changelog.html":{}}}],["7e50d74",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":767,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":837,"title":{},"body":{"index.html":{}}}],["897b3fe",{"_index":687,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":761,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["9831d36",{"_index":593,"title":{},"body":{"changelog.html":{}}}],["9b5a6b0",{"_index":576,"title":{},"body":{"changelog.html":{}}}],["9d0f754",{"_index":545,"title":{},"body":{"changelog.html":{}}}],["9e5ac95",{"_index":766,"title":{},"body":{"changelog.html":{}}}],["9fca12a",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["a77d07a",{"_index":763,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":874,"title":{},"body":{"license.html":{}}}],["account",{"_index":529,"title":{},"body":{"changelog.html":{}}}],["action",{"_index":895,"title":{},"body":{"license.html":{}}}],["actual",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["ad",{"_index":444,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["add",{"_index":586,"title":{},"body":{"changelog.html":{}}}],["alias",{"_index":904,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":99,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["along",{"_index":86,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["altern",{"_index":820,"title":{},"body":{"index.html":{}}}],["alway",{"_index":536,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":868,"title":{},"body":{"license.html":{}}}],["angular",{"_index":641,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["angular/common",{"_index":53,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["angular/cor",{"_index":31,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"dependencies.html":{},"index.html":{}}}],["any).eventlistenersubscriptions[typ",{"_index":392,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["api",{"_index":567,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":624,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["append",{"_index":111,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["appli",{"_index":108,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["aris",{"_index":899,"title":{},"body":{"license.html":{}}}],["assign",{"_index":635,"title":{},"body":{"changelog.html":{}}}],["associ",{"_index":858,"title":{},"body":{"license.html":{}}}],["author",{"_index":888,"title":{},"body":{"license.html":{}}}],["auto",{"_index":757,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["automat",{"_index":560,"title":{},"body":{"changelog.html":{}}}],["awesom",{"_index":824,"title":{},"body":{"index.html":{}}}],["axi",{"_index":85,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["back",{"_index":739,"title":{},"body":{"changelog.html":{}}}],["bcc9080",{"_index":717,"title":{},"body":{"changelog.html":{}}}],["be",{"_index":109,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["bebd925",{"_index":718,"title":{},"body":{"changelog.html":{}}}],["behaviour",{"_index":101,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["bfe9bb4",{"_index":562,"title":{},"body":{"changelog.html":{}}}],["bodi",{"_index":196,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["boolean",{"_index":59,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["bootstrap",{"_index":810,"title":{},"body":{"index.html":{}}}],["bound",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["break",{"_index":617,"title":{},"body":{"changelog.html":{}}}],["brows",{"_index":901,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":514,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":663,"title":{},"body":{"changelog.html":{}}}],["bump",{"_index":543,"title":{},"body":{"changelog.html":{}}}],["c",{"_index":846,"title":{},"body":{"license.html":{}}}],["c174023",{"_index":601,"title":{},"body":{"changelog.html":{}}}],["c428eed",{"_index":540,"title":{},"body":{"changelog.html":{}}}],["c5ef775",{"_index":579,"title":{},"body":{"changelog.html":{}}}],["c6771eb",{"_index":786,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":124,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["calledcount",{"_index":307,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["cancel",{"_index":136,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["canceldrag",{"_index":64,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["canceldrag$.complet",{"_index":308,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["canceldrag$.pip",{"_index":305,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["candrag",{"_index":344,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["case",{"_index":626,"title":{},"body":{"changelog.html":{}}}],["caus",{"_index":746,"title":{},"body":{"changelog.html":{}}}],["cdk",{"_index":826,"title":{},"body":{"index.html":{}}}],["cf1bc61",{"_index":557,"title":{},"body":{"changelog.html":{}}}],["cfff617",{"_index":519,"title":{},"body":{"changelog.html":{}}}],["chain",{"_index":180,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["chang",{"_index":503,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":502,"title":{"changelog.html":{}},"body":{}}],["changes.dragaxi",{"_index":336,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["charg",{"_index":853,"title":{},"body":{"license.html":{}}}],["check",{"_index":823,"title":{},"body":{"index.html":{}}}],["checkeventlisten",{"_index":343,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["child",{"_index":121,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["claim",{"_index":891,"title":{},"body":{"license.html":{}}}],["class",{"_index":77,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["click",{"_index":539,"title":{},"body":{"changelog.html":{}}}],["clienti",{"_index":71,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/functions.html":{}}}],["clientrect",{"_index":440,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["clientx",{"_index":70,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/functions.html":{}}}],["clone",{"_index":267,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["clone.appendchild(nod",{"_index":297,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["clone.innerhtml",{"_index":292,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["clone.parentelement!.removechild(clon",{"_index":301,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["close",{"_index":524,"title":{},"body":{"changelog.html":{}}}],["code",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["combinelatest",{"_index":36,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["combinelatest(this.pointermov",{"_index":225,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["come",{"_index":831,"title":{},"body":{"index.html":{}}}],["commit",{"_index":508,"title":{},"body":{"changelog.html":{}}}],["complet",{"_index":490,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["compon",{"_index":778,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["condit",{"_index":873,"title":{},"body":{"license.html":{}}}],["config",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["connect",{"_index":900,"title":{},"body":{"license.html":{}}}],["console.log('el",{"_index":816,"title":{},"body":{"index.html":{}}}],["const",{"_index":169,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["constructor",{"_index":161,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["constructor(el",{"_index":493,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["contain",{"_index":533,"title":{},"body":{"changelog.html":{}}}],["container.direct",{"_index":56,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["content",{"_index":598,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["continu",{"_index":841,"title":{},"body":{"index.html":{}}}],["contract",{"_index":896,"title":{},"body":{"license.html":{}}}],["control",{"_index":102,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["coordin",{"_index":1,"title":{"interfaces/Coordinates.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["copi",{"_index":856,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":845,"title":{},"body":{"license.html":{}}}],["correctli",{"_index":578,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":46,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["creat",{"_index":139,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["css",{"_index":107,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["current",{"_index":137,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{}}}],["currentdrag",{"_index":216,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["currentdrag$.complet",{"_index":312,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["currentdrag$.next",{"_index":333,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["currentdragdata",{"_index":49,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["currentdragdropdata",{"_index":464,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["currentdragsubscript",{"_index":456,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["cursor",{"_index":103,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["custom",{"_index":100,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["customis",{"_index":594,"title":{},"body":{"changelog.html":{}}}],["d010733",{"_index":590,"title":{},"body":{"changelog.html":{}}}],["d0372ec",{"_index":638,"title":{},"body":{"changelog.html":{}}}],["d2fdcde",{"_index":781,"title":{},"body":{"changelog.html":{}}}],["d72e16b",{"_index":614,"title":{},"body":{"changelog.html":{}}}],["d7c9256",{"_index":721,"title":{},"body":{"changelog.html":{}}}],["d96c26e",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["damag",{"_index":892,"title":{},"body":{"license.html":{}}}],["data",{"_index":81,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{}}}],["dc0f863",{"_index":708,"title":{},"body":{"changelog.html":{}}}],["dd3e89",{"_index":584,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":859,"title":{},"body":{"license.html":{}}}],["declar",{"_index":411,"title":{},"body":{"modules/DragAndDropModule.html":{},"index.html":{}}}],["default",{"_index":112,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["defin",{"_index":417,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{}}}],["delet",{"_index":372,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["demo",{"_index":799,"title":{},"body":{"index.html":{}}}],["demoapp",{"_index":809,"title":{},"body":{"index.html":{}}}],["demomodul",{"_index":811,"title":{},"body":{"index.html":{}}}],["depend",{"_index":683,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["deregist",{"_index":607,"title":{},"body":{"changelog.html":{}}}],["deregisterscrolllisten",{"_index":462,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["destroy",{"_index":160,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["dev",{"_index":713,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["develop",{"_index":803,"title":{},"body":{"index.html":{}}}],["devic",{"_index":128,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["didn't",{"_index":731,"title":{},"body":{"changelog.html":{}}}],["didoverlap",{"_index":487,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dimens",{"_index":575,"title":{},"body":{"changelog.html":{}}}],["direct",{"_index":16,"title":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"overview.html":{}}}],["directli",{"_index":619,"title":{},"body":{"changelog.html":{}}}],["directori",{"_index":833,"title":{},"body":{"index.html":{}}}],["disabl",{"_index":754,"title":{},"body":{"changelog.html":{}}}],["dispos",{"_index":777,"title":{},"body":{"changelog.html":{}}}],["distinctuntilchang",{"_index":437,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["distribut",{"_index":866,"title":{},"body":{"license.html":{}}}],["do",{"_index":477,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["document",{"_index":52,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["document.documentelement.scrollleft",{"_index":404,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["document.documentelement.scrolltop",{"_index":402,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["don't",{"_index":546,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dont",{"_index":581,"title":{},"body":{"changelog.html":{}}}],["drag",{"_index":90,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["drag$.pip",{"_index":465,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["drag$.subscrib",{"_index":489,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dragactiveclass",{"_index":110,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["draganddropmodul",{"_index":408,"title":{"modules/DragAndDropModule.html":{}},"body":{"modules/DragAndDropModule.html":{},"changelog.html":{},"index.html":{},"modules.html":{}}}],["draganddropmodule.forroot",{"_index":602,"title":{},"body":{"changelog.html":{}}}],["dragaxi",{"_index":58,"title":{"interfaces/DragAxis.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragaxix",{"_index":782,"title":{},"body":{"changelog.html":{}}}],["dragcancel",{"_index":67,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["dragcomplet",{"_index":220,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragcontain",{"_index":729,"title":{},"body":{"changelog.html":{}}}],["dragcursor",{"_index":105,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["dragcursor=\"mov",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["dragend",{"_index":141,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["dragend(ev",{"_index":815,"title":{},"body":{"index.html":{}}}],["dragenddata",{"_index":304,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragended$.subscrib",{"_index":298,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragendev",{"_index":66,"title":{"interfaces/DragEndEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragent",{"_index":449,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["draggabl",{"_index":6,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["draggable.direct",{"_index":414,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["draggabledirect",{"_index":78,"title":{"directives/DraggableDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["draggablehelp",{"_index":50,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["draggablescrollcontainerdirect",{"_index":54,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragleav",{"_index":450,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dragmoveev",{"_index":65,"title":{"interfaces/DragMoveEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragov",{"_index":451,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dragoveract",{"_index":472,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dragoverclass",{"_index":446,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["dragpointerdown",{"_index":130,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["dragpointerdownev",{"_index":61,"title":{"interfaces/DragPointerDownEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragsnapgrid",{"_index":92,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["dragstart",{"_index":138,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["dragstarted$.subscrib",{"_index":259,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragstartev",{"_index":63,"title":{"interfaces/DragStartEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["drop",{"_index":83,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["drop.module.t",{"_index":410,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["dropdata",{"_index":84,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dropev",{"_index":433,"title":{"interfaces/DropEvent.html":{}},"body":{"interfaces/DropEvent.html":{}}}],["droppabl",{"_index":548,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["droppable.direct",{"_index":415,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["droppable.j",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["droppable.umd.j",{"_index":672,"title":{},"body":{"changelog.html":{}}}],["droppable/bundles/angular",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["droppable/dist/umd/angular",{"_index":669,"title":{},"body":{"changelog.html":{}}}],["droppable/doc",{"_index":819,"title":{},"body":{"index.html":{}}}],["droppable/issues/61",{"_index":176,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["droppable/src/lib/drag",{"_index":409,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["droppable/src/lib/draggable.directive.t",{"_index":7,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/typealiases.html":{}}}],["droppable/src/lib/draggable.directive.ts:102",{"_index":426,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:108",{"_index":427,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:114",{"_index":420,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:120",{"_index":418,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:126",{"_index":424,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:132",{"_index":425,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:138",{"_index":430,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:146",{"_index":431,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:152",{"_index":432,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:158",{"_index":429,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:164",{"_index":428,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:78",{"_index":422,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:84",{"_index":419,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:90",{"_index":421,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:96",{"_index":423,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/droppable.directive.t",{"_index":434,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["droppable/src/lib/droppable.directive.ts:43",{"_index":497,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:49",{"_index":496,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:55",{"_index":498,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:61",{"_index":499,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:67",{"_index":500,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:73",{"_index":501,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:75",{"_index":494,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppabledirect",{"_index":412,"title":{"directives/DroppableDirective.html":{}},"body":{"modules/DragAndDropModule.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppableel",{"_index":459,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppableelement.rect",{"_index":466,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppableelement.scrollcontainerrect",{"_index":467,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppableelement.updatecach",{"_index":463,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppablethen",{"_index":808,"title":{},"body":{"index.html":{}}}],["droppeddata",{"_index":814,"title":{},"body":{"index.html":{}}}],["duplic",{"_index":745,"title":{},"body":{"changelog.html":{}}}],["e",{"_index":212,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["each",{"_index":570,"title":{},"body":{"changelog.html":{}}}],["ecc96ec",{"_index":599,"title":{},"body":{"changelog.html":{}}}],["edg",{"_index":625,"title":{},"body":{"changelog.html":{}}}],["ee1d06c",{"_index":587,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":789,"title":{},"body":{"changelog.html":{}}}],["element",{"_index":87,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["elementref",{"_index":18,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["emit",{"_index":596,"title":{},"body":{"changelog.html":{}}}],["end",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["enter",{"_index":768,"title":{},"body":{"changelog.html":{}}}],["environ",{"_index":829,"title":{},"body":{"index.html":{}}}],["error",{"_index":748,"title":{},"body":{"changelog.html":{}}}],["even",{"_index":572,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":72,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event.canceldrag$.emit",{"_index":135,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.changedtouches[0].clienti",{"_index":383,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.changedtouches[0].clientx",{"_index":382,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.clienti",{"_index":370,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.clientx",{"_index":369,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.i",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["event.touches[0].clienti",{"_index":380,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.touches[0].clientx",{"_index":379,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.x",{"_index":627,"title":{},"body":{"changelog.html":{}}}],["eventemitt",{"_index":21,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["eventlistenersubscript",{"_index":147,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["events:non",{"_index":561,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":57,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["expos",{"_index":600,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":881,"title":{},"body":{"license.html":{}}}],["extend",{"_index":62,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["f29b424",{"_index":774,"title":{},"body":{"changelog.html":{}}}],["f36ed2d",{"_index":559,"title":{},"body":{"changelog.html":{}}}],["f51214e",{"_index":595,"title":{},"body":{"changelog.html":{}}}],["f6a5cd",{"_index":616,"title":{},"body":{"changelog.html":{}}}],["fa8434b",{"_index":573,"title":{},"body":{"changelog.html":{}}}],["fals",{"_index":98,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["fb75711",{"_index":736,"title":{},"body":{"changelog.html":{}}}],["featur",{"_index":585,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"license.html":{}}}],["filter",{"_index":45,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["filter(([didoverlap",{"_index":486,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["filter(([previ",{"_index":320,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["filter(nod",{"_index":294,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["find",{"_index":817,"title":{},"body":{"index.html":{}}}],["fire",{"_index":547,"title":{},"body":{"changelog.html":{}}}],["firefox",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":884,"title":{},"body":{"license.html":{}}}],["fix",{"_index":174,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["follow",{"_index":872,"title":{},"body":{"license.html":{}}}],["foreach(nod",{"_index":296,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["forroot",{"_index":726,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":852,"title":{},"body":{"license.html":{}}}],["function",{"_index":438,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["furnish",{"_index":871,"title":{},"body":{"license.html":{}}}],["gener",{"_index":818,"title":{},"body":{"index.html":{}}}],["get",{"_index":185,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["getscrollposit",{"_index":398,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ghost",{"_index":94,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["ghostdragen",{"_index":95,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["ghostel",{"_index":158,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ghostelementappendto",{"_index":114,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["ghostelementcr",{"_index":140,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["ghostelementtempl",{"_index":123,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["global",{"_index":538,"title":{},"body":{"changelog.html":{}}}],["globaldragstyl",{"_index":188,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["grant",{"_index":851,"title":{},"body":{"license.html":{}}}],["grid",{"_index":91,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["guidelin",{"_index":509,"title":{},"body":{"changelog.html":{}}}],["hack",{"_index":182,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["haseventlisten",{"_index":345,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["height",{"_index":285,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["helper",{"_index":564,"title":{},"body":{"changelog.html":{}}}],["helper.provid",{"_index":51,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["here",{"_index":812,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":850,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":142,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["higher",{"_index":645,"title":{},"body":{"changelog.html":{}}}],["highlight",{"_index":552,"title":{},"body":{"changelog.html":{}}}],["holder",{"_index":889,"title":{},"body":{"license.html":{}}}],["hover",{"_index":759,"title":{},"body":{"changelog.html":{}}}],["htmlelement",{"_index":115,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["htmlstyleel",{"_index":189,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["https://github.com/mattlewis92/angular",{"_index":175,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["https://mattlewis92.github.io/angular",{"_index":800,"title":{},"body":{"index.html":{}}}],["icon",{"_index":758,"title":{},"body":{"changelog.html":{}}}],["ie",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["immedi",{"_index":583,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":79,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["impli",{"_index":882,"title":{},"body":{"license.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["improv",{"_index":606,"title":{},"body":{"changelog.html":{}}}],["includ",{"_index":515,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["inject",{"_index":27,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["inject(docu",{"_index":166,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["input",{"_index":22,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["insert",{"_index":118,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["insid",{"_index":522,"title":{},"body":{"changelog.html":{}}}],["instal",{"_index":802,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":295,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["interact",{"_index":780,"title":{},"body":{"changelog.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"interfaces/DropEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"overview.html":{}}}],["iscoordinatewithinrectangl",{"_index":439,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["iscoordinatewithinrectangle(clientx",{"_index":796,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iswithinel",{"_index":469,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["item",{"_index":813,"title":{},"body":{"index.html":{}}}],["key",{"_index":394,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["kind",{"_index":880,"title":{},"body":{"license.html":{}}}],["lazili",{"_index":710,"title":{},"body":{"changelog.html":{}}}],["leav",{"_index":769,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":281,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["lettabl",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["lewi",{"_index":848,"title":{},"body":{"license.html":{}}}],["liabil",{"_index":893,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":890,"title":{},"body":{"license.html":{}}}],["librari",{"_index":703,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["licenc",{"_index":517,"title":{},"body":{"changelog.html":{}}}],["licens",{"_index":804,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":862,"title":{},"body":{"license.html":{}}}],["line",{"_index":453,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["listen",{"_index":608,"title":{},"body":{"changelog.html":{}}}],["local",{"_index":832,"title":{},"body":{"index.html":{}}}],["lock",{"_index":783,"title":{},"body":{"changelog.html":{}}}],["log",{"_index":504,"title":{},"body":{"changelog.html":{}}}],["longer",{"_index":621,"title":{},"body":{"changelog.html":{}}}],["loosen",{"_index":716,"title":{},"body":{"changelog.html":{}}}],["maintain",{"_index":555,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":706,"title":{},"body":{"changelog.html":{}}}],["map",{"_index":38,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["map(([pointermoveev",{"_index":227,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["map(([previ",{"_index":326,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["map(calledcount",{"_index":306,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["map(movedata",{"_index":238,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["map(valu",{"_index":317,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["margin",{"_index":288,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["match",{"_index":406,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["materi",{"_index":825,"title":{},"body":{"index.html":{}}}],["math.round(movedata.transformi",{"_index":244,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["math.round(movedata.transformx",{"_index":241,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["matt",{"_index":847,"title":{},"body":{"license.html":{}}}],["merchant",{"_index":883,"title":{},"body":{"license.html":{}}}],["merg",{"_index":34,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"license.html":{}}}],["merge(dragcomplet",{"_index":313,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mergemap",{"_index":39,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mergemap((pointerdownev",{"_index":173,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mergemap(dragenddata",{"_index":303,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["metadata",{"_index":416,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{}}}],["method",{"_index":603,"title":{},"body":{"changelog.html":{}}}],["migrat",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["mimic",{"_index":771,"title":{},"body":{"changelog.html":{}}}],["miscellan",{"_index":794,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":844,"title":{},"body":{"index.html":{},"license.html":{}}}],["modifi",{"_index":864,"title":{},"body":{"license.html":{}}}],["modul",{"_index":407,"title":{"modules/DragAndDropModule.html":{},"modules.html":{}},"body":{"modules/DragAndDropModule.html":{},"changelog.html":{},"modules.html":{},"overview.html":{}}}],["mous",{"_index":126,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["mousedown",{"_index":150,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["mouseent",{"_index":152,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mouseev",{"_index":73,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mouseleav",{"_index":153,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mousemov",{"_index":148,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mousemoveev",{"_index":364,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mousemoveevent.clienti",{"_index":367,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mousemoveevent.clientx",{"_index":366,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mouseup",{"_index":151,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["move",{"_index":134,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["movedata",{"_index":245,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["movedata.scrollleft",{"_index":249,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["movedata.scrolltop",{"_index":252,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["movedata.transformi",{"_index":243,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["movedata.transformx",{"_index":240,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["moz",{"_index":197,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ms",{"_index":200,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mwldraggabl",{"_index":76,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["mwldroppabl",{"_index":443,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["name",{"_index":454,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["nativ",{"_index":772,"title":{},"body":{"changelog.html":{}}}],["need",{"_index":674,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["new",{"_index":131,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["next",{"_index":113,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["next.i",{"_index":325,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["next.x",{"_index":323,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ng",{"_index":116,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["ng4",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["ngmodul",{"_index":413,"title":{},"body":{"modules/DragAndDropModule.html":{},"index.html":{}}}],["ngonchanges(chang",{"_index":335,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ngondestroy",{"_index":337,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ngoninit",{"_index":167,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ngzone",{"_index":25,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["node",{"_index":122,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["node.j",{"_index":830,"title":{},"body":{"index.html":{}}}],["none",{"_index":199,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["noninfring",{"_index":887,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":505,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":875,"title":{},"body":{"license.html":{}}}],["now",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":518,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["null",{"_index":159,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["number",{"_index":12,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["o",{"_index":332,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["object",{"_index":80,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["object.keys(styles).foreach(key",{"_index":395,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["object.keys(this.eventlistenersubscriptions).foreach(typ",{"_index":391,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["object.keys(this.eventlistenersubscriptions).length",{"_index":346,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["observ",{"_index":33,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["observable(observ",{"_index":206,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["observer.next(",{"_index":213,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["obtain",{"_index":855,"title":{},"body":{"license.html":{}}}],["old",{"_index":556,"title":{},"body":{"changelog.html":{}}}],["on",{"_index":125,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{}}}],["onc",{"_index":609,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["onchang",{"_index":24,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ondestroy",{"_index":23,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["oninit",{"_index":17,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["onmousedown(ev",{"_index":362,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["onmouseent",{"_index":384,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["onmouseleav",{"_index":386,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["onmouseup(ev",{"_index":371,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ontouchend(ev",{"_index":381,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ontouchstart(ev",{"_index":374,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["oper",{"_index":660,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":30,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["origin",{"_index":96,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["otherwis",{"_index":898,"title":{},"body":{"license.html":{}}}],["out",{"_index":549,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["output",{"_index":20,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["outsid",{"_index":720,"title":{},"body":{"changelog.html":{}}}],["over",{"_index":445,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["overlap",{"_index":448,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlaps$.pipe(distinctuntilchang",{"_index":471,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlaps$.pipe(filter(overlapsnow",{"_index":483,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlapschang",{"_index":470,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlapsnow",{"_index":480,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlapsnow)).subscrib",{"_index":484,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overview",{"_index":902,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrit",{"_index":120,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["packag",{"_index":647,"title":{"dependencies.html":{}},"body":{"changelog.html":{}}}],["packagr",{"_index":662,"title":{},"body":{"changelog.html":{}}}],["pairwis",{"_index":43,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["paramet",{"_index":495,"title":{},"body":{"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":119,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["part",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["particular",{"_index":885,"title":{},"body":{"license.html":{}}}],["pass",{"_index":82,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["path",{"_index":668,"title":{},"body":{"changelog.html":{}}}],["peer",{"_index":682,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["perform",{"_index":605,"title":{},"body":{"changelog.html":{}}}],["permiss",{"_index":849,"title":{},"body":{"license.html":{}}}],["permit",{"_index":870,"title":{},"body":{"license.html":{}}}],["person",{"_index":854,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":214,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pipe(filter(overlapsnow",{"_index":479,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["pipe(shar",{"_index":224,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pipe(take(1",{"_index":314,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointer",{"_index":127,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["pointerdown",{"_index":143,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerdownevent.clienti",{"_index":233,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerdownevent.clientx",{"_index":230,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerdownevent.event.stoppropag",{"_index":181,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerdrag",{"_index":170,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerdragged$.pip",{"_index":316,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerdragged$.pipe(pairwis",{"_index":319,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerev",{"_index":69,"title":{"interfaces/PointerEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointermov",{"_index":144,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointermove.pip",{"_index":256,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointermoveevent.clienti",{"_index":232,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointermoveevent.clientx",{"_index":229,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerup",{"_index":145,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["port",{"_index":836,"title":{},"body":{"index.html":{}}}],["portion",{"_index":878,"title":{},"body":{"license.html":{}}}],["posit",{"_index":278,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["power",{"_index":805,"title":{},"body":{"index.html":{}}}],["prepar",{"_index":828,"title":{},"body":{"index.html":{}}}],["preserv",{"_index":558,"title":{},"body":{"changelog.html":{}}}],["press",{"_index":129,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["prevent",{"_index":183,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["previou",{"_index":321,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["previous.i",{"_index":324,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["previous.x",{"_index":322,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["privat",{"_index":146,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["project",{"_index":506,"title":{},"body":{"changelog.html":{}}}],["projects/.../draggable.directive.t",{"_index":905,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../droppable.directive.t",{"_index":795,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/angular",{"_index":5,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["propag",{"_index":178,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["properti",{"_index":9,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragStartEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["prototyp",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["provid",{"_index":565,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["public",{"_index":566,"title":{},"body":{"changelog.html":{}}}],["publish",{"_index":865,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":886,"title":{},"body":{"license.html":{}}}],["readm",{"_index":516,"title":{},"body":{"changelog.html":{}}}],["recalcul",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["recommend",{"_index":822,"title":{},"body":{"index.html":{}}}],["recomput",{"_index":615,"title":{},"body":{"changelog.html":{}}}],["rect",{"_index":265,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/functions.html":{}}}],["rect.height}px",{"_index":286,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["rect.left",{"_index":441,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["rect.left}px",{"_index":282,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["rect.top",{"_index":442,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["rect.top}px",{"_index":280,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["rect.width}px",{"_index":284,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["rectangl",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["regular",{"_index":679,"title":{},"body":{"changelog.html":{}}}],["releas",{"_index":842,"title":{},"body":{"index.html":{}}}],["releaselicens",{"_index":843,"title":{},"body":{"index.html":{}}}],["reload",{"_index":838,"title":{},"body":{"index.html":{}}}],["remov",{"_index":537,"title":{},"body":{"changelog.html":{}}}],["renam",{"_index":762,"title":{},"body":{"changelog.html":{}}}],["render",{"_index":162,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["renderer2",{"_index":19,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["replaysubject",{"_index":35,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["repliat",{"_index":665,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":834,"title":{},"body":{"index.html":{}}}],["requir",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["respect",{"_index":733,"title":{},"body":{"changelog.html":{}}}],["restor",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["restrict",{"_index":861,"title":{},"body":{"license.html":{}}}],["result",{"_index":405,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":210,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["revert",{"_index":744,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":863,"title":{},"body":{"license.html":{}}}],["round",{"_index":569,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":719,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["rxj",{"_index":37,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["rxjs/oper",{"_index":48,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["safari",{"_index":187,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["same",{"_index":752,"title":{},"body":{"changelog.html":{}}}],["save",{"_index":807,"title":{},"body":{"index.html":{}}}],["scroll",{"_index":55,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["scroll.left",{"_index":235,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["scroll.top",{"_index":237,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["scrollabl",{"_index":532,"title":{},"body":{"changelog.html":{}}}],["scrollcontain",{"_index":165,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["scrollcontainerrect",{"_index":461,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["scrollcontainerscrol",{"_index":205,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["scrollcontainerscroll$).pip",{"_index":226,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["scrolli",{"_index":251,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["scrollleft",{"_index":234,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["scrolltop",{"_index":236,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["scrollx",{"_index":248,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["seamless",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":474,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["select",{"_index":186,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["selector",{"_index":75,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{}}}],["sell",{"_index":869,"title":{},"body":{"license.html":{}}}],["server",{"_index":835,"title":{},"body":{"index.html":{}}}],["set",{"_index":574,"title":{},"body":{"changelog.html":{}}}],["setcursor(valu",{"_index":388,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["setelementstyl",{"_index":393,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["shall",{"_index":876,"title":{},"body":{"license.html":{}}}],["share",{"_index":44,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["show",{"_index":93,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["showoriginalelementwhiledrag",{"_index":97,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["side",{"_index":571,"title":{},"body":{"changelog.html":{}}}],["simplechang",{"_index":26,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["skyhook",{"_index":827,"title":{},"body":{"index.html":{}}}],["snap",{"_index":89,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["snapgrid",{"_index":60,"title":{"interfaces/SnapGrid.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["softwar",{"_index":857,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{}}}],["standard",{"_index":455,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["start",{"_index":132,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["startscrollposit",{"_index":203,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["startscrollposition.left",{"_index":250,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["startscrollposition.top",{"_index":253,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["startwith",{"_index":47,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["startwith(startscrollposit",{"_index":215,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["stop",{"_index":177,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["string",{"_index":106,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{}}}],["style",{"_index":191,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["styles[key",{"_index":397,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["subject",{"_index":32,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"license.html":{}}}],["sublicens",{"_index":867,"title":{},"body":{"license.html":{}}}],["subscrib",{"_index":309,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["subscript",{"_index":436,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["substanti",{"_index":877,"title":{},"body":{"license.html":{}}}],["system.j",{"_index":673,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":435,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["tabl",{"_index":801,"title":{},"body":{"index.html":{}}}],["take",{"_index":41,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["take(1",{"_index":257,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["takelast",{"_index":42,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["takelast(1",{"_index":258,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["takeuntil",{"_index":40,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["takeuntil(dragcomplet",{"_index":255,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["templat",{"_index":117,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{}}}],["templateref",{"_index":28,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["test",{"_index":839,"title":{},"body":{"index.html":{}}}],["test:watch",{"_index":840,"title":{},"body":{"index.html":{}}}],["text",{"_index":184,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["text/css",{"_index":193,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["there'",{"_index":475,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.candrag",{"_index":172,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.checkeventlisten",{"_index":168,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.currentdragsubscript",{"_index":457,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.currentdragsubscription.unsubscrib",{"_index":492,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.destroy",{"_index":223,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.destroy$.next",{"_index":342,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.document.head.appendchild(globaldragstyl",{"_index":202,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.document.head.removechild(globaldragstyl",{"_index":315,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragactiveclass",{"_index":263,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragaxis.i",{"_index":247,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragaxis.x",{"_index":246,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragcursor",{"_index":287,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragend.next",{"_index":310,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragenter.next",{"_index":482,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.draggablehelper.currentdrag.next(currentdrag",{"_index":302,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.draggablehelper.currentdrag.subscrib",{"_index":458,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dragging.next",{"_index":327,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragleave.next",{"_index":488,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dragover.next",{"_index":485,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dragoverclass",{"_index":481,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dragpointerdown.next",{"_index":218,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragsnapgrid.i",{"_index":242,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragsnapgrid.x",{"_index":239,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragstart.next",{"_index":260,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.drop.next",{"_index":491,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dropdata",{"_index":334,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.element.nativeel",{"_index":262,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.element.nativeelement.clonenod",{"_index":268,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.element.nativeelement.getboundingclientrect",{"_index":266,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.element.nativeelement.nexts",{"_index":275,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.element.nativeelement.parentnode!.insertbefor",{"_index":274,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.mousedown",{"_index":348,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.mouseent",{"_index":358,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.mouseleav",{"_index":360,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.mousemov",{"_index":363,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.mouseup",{"_index":351,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.touchcancel",{"_index":357,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.touchend",{"_index":355,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.touchmov",{"_index":375,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.touchstart",{"_index":353,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.getscrollposit",{"_index":204,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ghostdragen",{"_index":264,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ghostel",{"_index":276,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ghostelementappendto",{"_index":272,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ghostelementappendto.appendchild(clon",{"_index":273,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ghostelementcreated.emit",{"_index":300,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ghostelementtempl",{"_index":289,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.onmousedown(ev",{"_index":350,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.onmouseent",{"_index":359,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.onmouseleav",{"_index":361,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.onmouseup(ev",{"_index":352,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ontouchend(ev",{"_index":356,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ontouchstart(ev",{"_index":354,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerdown",{"_index":222,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerdown$.complet",{"_index":339,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerdown$.next",{"_index":368,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerdown$.pip",{"_index":171,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointermove$.complet",{"_index":340,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointermove$.next",{"_index":365,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerup",{"_index":221,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerup$.complet",{"_index":341,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerup$.next",{"_index":373,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.addclass",{"_index":261,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.appendchild",{"_index":194,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.createel",{"_index":190,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.createtext",{"_index":195,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.listen",{"_index":349,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.listen(scrollcontain",{"_index":211,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.removeclass",{"_index":311,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.setattribute(globaldragstyl",{"_index":192,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.setstyl",{"_index":270,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.setstyle(el",{"_index":396,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.setstyle(this.element.nativeel",{"_index":389,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.scrollcontain",{"_index":207,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.scrollcontainer.elementref.nativeel",{"_index":208,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.scrollcontainer.elementref.nativeelement.getboundingclientrect",{"_index":468,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.scrollcontainer.elementref.nativeelement.scrollleft",{"_index":400,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.scrollcontainer.elementref.nativeelement.scrolltop",{"_index":399,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.setcursor",{"_index":387,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.setcursor(this.dragcursor",{"_index":385,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.setelementstyles(clon",{"_index":277,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.setelementstyles(this.ghostel",{"_index":331,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.showoriginalelementwhiledrag",{"_index":269,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.unsubscribeeventlisten",{"_index":338,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.validatedrag",{"_index":254,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.vcr.createembeddedview",{"_index":291,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.vcr.remove(this.vcr.indexof(viewref",{"_index":299,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.zone.run",{"_index":217,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.zone.runoutsideangular",{"_index":347,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["through",{"_index":806,"title":{},"body":{"index.html":{}}}],["throw",{"_index":582,"title":{},"body":{"changelog.html":{}}}],["time",{"_index":447,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["todo",{"_index":473,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["top",{"_index":279,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["tort",{"_index":897,"title":{},"body":{"license.html":{}}}],["touch",{"_index":133,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["touchcancel",{"_index":157,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchend",{"_index":156,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchev",{"_index":74,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchmov",{"_index":155,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchmoveev",{"_index":376,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchmoveevent.targettouches[0].clienti",{"_index":378,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchmoveevent.targettouches[0].clientx",{"_index":377,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchstart",{"_index":154,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["transform",{"_index":328,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["transformi",{"_index":231,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["transformx",{"_index":228,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["transformy}px",{"_index":330,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["translate(${transformx}px",{"_index":329,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["true",{"_index":88,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["tslint:dis",{"_index":452,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":903,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["umd",{"_index":667,"title":{},"body":{"changelog.html":{}}}],["undefin",{"_index":797,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unsubscribeeventlisten",{"_index":390,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["until",{"_index":770,"title":{},"body":{"changelog.html":{}}}],["up",{"_index":179,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["updat",{"_index":675,"title":{},"body":{"changelog.html":{}}}],["updatecach",{"_index":460,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["upgrad",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["us",{"_index":104,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["user",{"_index":198,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["valid",{"_index":765,"title":{},"body":{"changelog.html":{}}}],["validatedrag",{"_index":68,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["valu",{"_index":318,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["vcr",{"_index":164,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["version",{"_index":507,"title":{},"body":{"changelog.html":{}}}],["via",{"_index":478,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["view",{"_index":550,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["viewcontainerref",{"_index":29,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["viewref",{"_index":290,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["viewref.rootnod",{"_index":293,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["visibl",{"_index":271,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["void",{"_index":149,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["warranti",{"_index":879,"title":{},"body":{"license.html":{}}}],["way",{"_index":476,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["webkit",{"_index":201,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["whether",{"_index":894,"title":{},"body":{"license.html":{}}}],["whilst",{"_index":530,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["width",{"_index":283,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["window",{"_index":209,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["window.pagexoffset",{"_index":403,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["window.pageyoffset",{"_index":401,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["without",{"_index":860,"title":{},"body":{"license.html":{}}}],["work",{"_index":707,"title":{},"body":{"changelog.html":{}}}],["wors",{"_index":747,"title":{},"body":{"changelog.html":{}}}],["wrote",{"_index":821,"title":{},"body":{"index.html":{}}}],["x",{"_index":10,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["y",{"_index":11,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["yourself",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["z",{"_index":544,"title":{},"body":{"changelog.html":{}}}],["zone",{"_index":163,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Coordinates.html":{"url":"interfaces/Coordinates.html","title":"interface - Coordinates","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Coordinates\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DragAndDropModule.html":{"url":"modules/DragAndDropModule.html","title":"module - DragAndDropModule","body":"\n                   \n\n\n\n\n  Modules\n  DragAndDropModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/drag-and-drop.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                DraggableDirective\n                            \n                            \n                                DroppableDirective\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    DraggableDirective\n                            \n                            \n                                    DroppableDirective\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { DraggableDirective } from './draggable.directive';\nimport { DroppableDirective } from './droppable.directive';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\n@NgModule({\n  declarations: [\n    DraggableDirective,\n    DroppableDirective,\n    DraggableScrollContainerDirective\n  ],\n  exports: [\n    DraggableDirective,\n    DroppableDirective,\n    DraggableScrollContainerDirective\n  ]\n})\nexport class DragAndDropModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragAxis.html":{"url":"interfaces/DragAxis.html","title":"interface - DragAxis","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragAxis\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragEndEvent.html":{"url":"interfaces/DragEndEvent.html","title":"interface - DragEndEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragEndEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Coordinates\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dragCancelled\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dragCancelled\n                                    \n                                \n                                \n                                    \n                                        dragCancelled:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragMoveEvent.html":{"url":"interfaces/DragMoveEvent.html","title":"interface - DragMoveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragMoveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Coordinates\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragPointerDownEvent.html":{"url":"interfaces/DragPointerDownEvent.html","title":"interface - DragPointerDownEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragPointerDownEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Coordinates\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragStartEvent.html":{"url":"interfaces/DragStartEvent.html","title":"interface - DragStartEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragStartEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cancelDrag$\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cancelDrag$\n                                    \n                                \n                                \n                                    \n                                        cancelDrag$:     ReplaySubject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReplaySubject\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DraggableDirective.html":{"url":"directives/DraggableDirective.html","title":"directive - DraggableDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  DraggableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnChanges\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlDraggable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragActiveClass\n                            \n                            \n                                dragAxis\n                            \n                            \n                                dragCursor\n                            \n                            \n                                dragSnapGrid\n                            \n                            \n                                dropData\n                            \n                            \n                                ghostDragEnabled\n                            \n                            \n                                ghostElementAppendTo\n                            \n                            \n                                ghostElementTemplate\n                            \n                            \n                                showOriginalElementWhileDragging\n                            \n                            \n                                validateDrag\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragEnd\n                            \n                            \n                                dragging\n                            \n                            \n                                dragPointerDown\n                            \n                            \n                                dragStart\n                            \n                            \n                                ghostElementCreated\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragActiveClass\n                    \n                    \n                        The css class to apply when the element is being dragged\n\n                            \n                            Type :    string\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:120\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragAxis\n                    \n                    \n                        The axis along which the element is draggable\n\n                            \n                            Type :    DragAxis\n\n                            \n                        \n                            Default value : { x: true, y: true }\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:84\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragCursor\n                    \n                    \n                        The cursor to use when dragging the element\n\n                            \n                            Type :    string\n\n                            \n                        \n                            Default value : ''\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:114\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragSnapGrid\n                    \n                    \n                        Snap all drags to an x / y grid\n\n                            \n                            Type :    SnapGrid\n\n                            \n                        \n                            Default value : {}\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:90\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dropData\n                    \n                    \n                        an object of data you can pass to the drop event\n\n                            \n                            Type :    any\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:78\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostDragEnabled\n                    \n                    \n                        Show a ghost element that shows the drag when dragging\n\n                            \n                            Type :    boolean\n\n                            \n                        \n                            Default value : true\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:96\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementAppendTo\n                    \n                    \n                        The element the ghost element will be appended to. Default is next to the dragged element\n\n                            \n                            Type :    HTMLElement\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:126\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementTemplate\n                    \n                    \n                        An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n\n                            \n                            Type :    TemplateRef\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:132\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showOriginalElementWhileDragging\n                    \n                    \n                        Show the original element when ghostDragEnabled is true\n\n                            \n                            Type :    boolean\n\n                            \n                        \n                            Default value : false\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:102\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        validateDrag\n                    \n                    \n                        Allow custom behaviour to control when the element is dragged\n\n                            \n                            Type :    ValidateDrag\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:108\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        dragEnd\n                    \n                    \n                        Called after the element is dragged\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:164\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragging\n                    \n                    \n                        Called when the element is being dragged\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:158\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragPointerDown\n                    \n                    \n                        Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:138\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragStart\n                    \n                    \n                        Called when the element has started to be dragged.\nOnly called after at least one mouse or touch move event.\nIf you call $event.cancelDrag$.emit() it will cancel the current drag\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:146\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementCreated\n                    \n                    \n                        Called after the ghost element has been created\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:152\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropEvent.html":{"url":"interfaces/DropEvent.html","title":"interface - DropEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DropEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dropData\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dropData\n                                    \n                                \n                                \n                                    \n                                        dropData:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  Optional\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n}\n\n@Directive({\n  selector: '[mwlDroppable]'\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input()\n  dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output()\n  dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output()\n  dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output()\n  dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output()\n  drop = new EventEmitter(); // tslint:disable-line no-output-named-after-standard-event\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private renderer: Renderer2,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective\n  ) {}\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      drag$ => {\n        this.renderer.addClass(\n          this.element.nativeElement,\n          this.dragActiveClass\n        );\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          }\n        );\n\n        let currentDragDropData: any;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData }) => {\n            currentDragDropData = dropData;\n            if (droppableElement.updateCache) {\n              droppableElement.rect = this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect = this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect\n            );\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect\n                )\n              );\n            } else {\n              return isWithinElement;\n            }\n          })\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter(overlapsNow => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            this.renderer.addClass(\n              this.element.nativeElement,\n              this.dragOverClass\n            );\n            this.zone.run(() => {\n              this.dragEnter.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        overlaps$.pipe(filter(overlapsNow => overlapsNow)).subscribe(() => {\n          this.zone.run(() => {\n            this.dragOver.next({\n              dropData: currentDragDropData\n            });\n          });\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragOverClass\n            );\n            this.zone.run(() => {\n              this.dragLeave.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            if (dragOverActive) {\n              this.renderer.removeClass(\n                this.element.nativeElement,\n                this.dragOverClass\n              );\n              this.zone.run(() => {\n                this.drop.next({\n                  dropData: currentDragDropData\n                });\n              });\n            }\n          }\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DroppableDirective.html":{"url":"directives/DroppableDirective.html","title":"directive - DroppableDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  DroppableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlDroppable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentDragSubscription\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragActiveClass\n                            \n                            \n                                dragOverClass\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragEnter\n                            \n                            \n                                dragLeave\n                            \n                            \n                                dragOver\n                            \n                            \n                                drop\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element: ElementRef, draggableHelper: DraggableHelper, zone: NgZone, renderer: Renderer2, scrollContainer: DraggableScrollContainerDirective)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:75\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        draggableHelper\n                                                  \n                                                        \n                                                                    DraggableHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scrollContainer\n                                                  \n                                                        \n                                                                    DraggableScrollContainerDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragActiveClass\n                    \n                    \n                        Added to the element any time a draggable element is being dragged\n\n                            \n                            Type :    string\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:49\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragOverClass\n                    \n                    \n                        Added to the element when an element is dragged over it\n\n                            \n                            Type :    string\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:43\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        dragEnter\n                    \n                    \n                        Called when a draggable element starts overlapping the element\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:55\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragLeave\n                    \n                    \n                        Called when a draggable element stops overlapping the element\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:61\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragOver\n                    \n                    \n                        Called when a draggable element is moved over the element\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:67\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        drop\n                    \n                    \n                        Called when a draggable element is dropped on this element\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:73\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentDragSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        currentDragSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:75\n                            \n                        \n\n\n            \n        \n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  Optional\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n}\n\n@Directive({\n  selector: '[mwlDroppable]'\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input()\n  dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output()\n  dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output()\n  dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output()\n  dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output()\n  drop = new EventEmitter(); // tslint:disable-line no-output-named-after-standard-event\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private renderer: Renderer2,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective\n  ) {}\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      drag$ => {\n        this.renderer.addClass(\n          this.element.nativeElement,\n          this.dragActiveClass\n        );\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          }\n        );\n\n        let currentDragDropData: any;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData }) => {\n            currentDragDropData = dropData;\n            if (droppableElement.updateCache) {\n              droppableElement.rect = this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect = this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect\n            );\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect\n                )\n              );\n            } else {\n              return isWithinElement;\n            }\n          })\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter(overlapsNow => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            this.renderer.addClass(\n              this.element.nativeElement,\n              this.dragOverClass\n            );\n            this.zone.run(() => {\n              this.dragEnter.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        overlaps$.pipe(filter(overlapsNow => overlapsNow)).subscribe(() => {\n          this.zone.run(() => {\n            this.dragOver.next({\n              dropData: currentDragDropData\n            });\n          });\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragOverClass\n            );\n            this.zone.run(() => {\n              this.dragLeave.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            if (dragOverActive) {\n              this.renderer.removeClass(\n                this.element.nativeElement,\n                this.dragOverClass\n              );\n              this.zone.run(() => {\n                this.drop.next({\n                  dropData: currentDragDropData\n                });\n              });\n            }\n          }\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PointerEvent.html":{"url":"interfaces/PointerEvent.html","title":"interface - PointerEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PointerEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientX\n                                \n                                \n                                        clientY\n                                \n                                \n                                        event\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                    \n                                \n                                \n                                    \n                                        clientX:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                    \n                                \n                                \n                                    \n                                        clientY:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                    \n                                \n                                \n                                    \n                                        event:     MouseEvent | TouchEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MouseEvent | TouchEvent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SnapGrid.html":{"url":"interfaces/SnapGrid.html","title":"interface - SnapGrid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SnapGrid\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        x\n                                \n                                \n                                            Optional\n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n4.0.2 (2018-09-18)\nBug Fixes\n\ninclude readme and licence in npm (cfff617)\n\n\n4.0.1 (2018-09-01)\nBug Fixes\n\nallow draggable elements insider other draggable elements to be dragged (700fef1), closes #61\n\n\n4.0.0 (2018-08-29)\nBug Fixes\n\naccount for the window being scrolled whilst dragging (566bf78)\nallow dragging the element inside a scrollable container (6e0a1a3), closes #25\nalways remove global styles when clicking draggable elements (c428eed), closes #44\nappend the ghost element to the body (4f23661)\nbump up z-index of element being dragged (9d0f754)\ndon't fire drop events when the droppable element is scrolled out of the view (4c9224b)\ndon't highlight text when dragging elements (67d3a5e), closes #28\nmaintain old ghost element behaviour by default (cf1bc61)\npreserve original element styles after dragging (f36ed2d)\nremove automatic pointer-events:none on dragged element (bfe9bb4)\nremove margin on the ghost element (06396e6)\nremove the drag helper provider from the public api (48d4fe6)\nround snap grids so dragging from each side is even (fa8434b)\nset dimensions and z-index on ghost element (9b5a6b0)\ndragCursor: don't default the drag cursor to move (0a95ac7)\ndroppable: correctly account for scroll events when dragging elements (c5ef775), closes #23\ndroppable: dont throw when immediately destroying the directive (dd3e89e)\n\nFeatures\n\ndragActiveClass: add class when dragging element (ee1d06c)\ndragCancel$: allow the drag to be cancelled (538f9b7), closes #30\ndraggable: add option to show the original element while dragging (d010733)\ndragOverClass: add a class when an element is dragged over it (76852bc)\ndroppable: add css class when any element is being dragged (5995f81)\nadd a way of setting the scroll container if not the window (9831d36)\nghostElementAppendTo: allow the ghost element parent to be customised (f51214e)\nghostElementCreated: emit new event after the ghost element is created (22530b9)\nghostElementTemplate: allow changing the ghost element contents (ecc96ec)\nexpose interfaces for all events (c174023)\nremove the DragAndDropModule.forRoot method (5ae52a7)\n\nPerformance Improvements\n\nderegister scroll listener once drag complete (7e50d74)\nonly recalculate the bounding rectangle once after scrolling (d72e16b)\nonly recompute draggable position on window scroll (f6a5cde)\n\nBREAKING CHANGES\n\nThe DragAndDropModule.forRoot method was removed. To migrate just import the\nDragAndDropModule module directly\nthe drag helper provider is now no longer exported as part of the public api, just\nremove it from your code to migrate\nA cloned element is now created when the element is being dragged, and the dragged\nelement is set to be positioned fixed. This may break some apps in some edge cases.\nThe dragStart $event.x and $event.y values were removed as these were always\n0\npointer-events:none is no longer automatically applied to elements while they are being dragged. To migrate use the dragActiveClass option and set this yourself with css\ndragCursor: The drag cursor will no longer be set to move by default, to restore the\nbehaviour set dragCursor=\"move\" or use CSS on the draggable elements to change the cursor\n\n\n3.0.1 (2018-06-05)\nBug Fixes\n\ndrag: style assignment for dragged element on IE (#33) (d0372ec), closes #29\n\n\n3.0.0 (2018-05-09)\nFeatures\n\nupgrade to angular 6 (d96c26e), closes #31\n\nBREAKING CHANGES\n\nangular 6 and rxjs 6 or higher are now required to use this package\n\n\n2.0.0 (2017-12-26)\nBug Fixes\n\nonly call drag start and end outputs when the element is actually dragged (45c6b5f), closes #21 #20\n\nFeatures\n\nupgrade to angular 5 (4159ce2)\nuse lettable rxjs operators (9fca12a)\nuse ng-packagr for building the package (57dd436)\ndragPointerDown: add a new output to repliate the old dragStart behaviour (4a58c61)\n\nBREAKING CHANGES\n\nThe UMD module path has changed from\nangular-draggable-droppable/dist/umd/angular-draggable-droppable.js to\nangular-draggable-droppable/bundles/angular-draggable-droppable.umd.js. System.js users will need\nto update their config.\nrxjs operators will now no longer be added to the observable prototype. Also rxjs\n= 5.5.x or higher is required\n\n\nAngular 5 or higher is now required to use this package\ndrag start and end events are now only called when the element is actually dragged,\nuse regular mousedown and mouseup events to get the old behaviour\n\n\n1.1.1 (2017-10-21)\nBug Fixes\n\nallow angular 5 peer dependency (1265bee)\n\n\n1.1.0 (2017-09-22)\nFeatures\n\ndraggable: allow the draggable cursor to be customised (897b3fe)\n\n\n1.0.2 (2017-09-18)\nBug Fixes\n\ndraggable: fire dragEnd event when the event was not dragged (73d65d7), closes #17\n\n\n1.0.1 (2017-04-14)\nBug Fixes\n\ndraggable: prevent text from being highlighted in firefox (7d859c1)\n\n\n1.0.0 (2017-03-24)\nFeatures\n\nng4: upgrade to angular 4 (42631bc)\n\nBREAKING CHANGES\n\nng4: angular 4.0 or higher is now required to use this library. The upgrade should be seamless for most users\n\n\n0.6.0 (2017-03-23)\nFeatures\n\ndraggable: make dragging work on touch devices (dc0f863)\n\n\n0.5.4 (2017-03-04)\nPerformance Improvements\n\ndraggable: lazily create all mouse event listeners (3c99d40)\n\n\n0.5.3 (2017-03-04)\nBug Fixes\n\nmove dependencies to dev (17a2ccc)\n\n\n0.5.2 (2017-03-04)\nBug Fixes\n\nloosen peer dependency to allow angular 4 (bcc9080)\n\nPerformance Improvements\n\ndraggable: lazily create the mouse move listener (bebd925)\nrun all event listeners outside of angulars zone (d7c9256)\n\n\n0.5.1 (2017-01-06)\nBug Fixes\n\ndraggable: allow draggable events to be clicked (44ea67e)\n\n\n0.5.0 (2016-12-21)\nFeatures\n\ndragAndDropModule: add forRoot method (00f6989)\n\nBREAKING CHANGES\n\ndragAndDropModule: You must now import the DragAndDropModule with the forRoot method\n\n\n0.4.0 (2016-12-18)\nFeatures\n\ndraggable: remove the dragContainer option (5aca67d)\n\nBREAKING CHANGES\n\ndraggable: the dragContainer option has been removed as it didn't work in all cases and can be\n\nimplemented yourself with the validateDrag option\n\n0.3.1 (2016-12-18)\nBug Fixes\n\ndraggable: make the dragEnd output respect the validateDrag input (26cfa7e)\n\n\n0.3.0 (2016-12-12)\nFeatures\n\ndraggable: add dragContainer option (fb75711), closes #10\n\n\n0.2.3 (2016-12-11)\nBug Fixes\n\ndraggable: allow events to be dragged back into their original positions (7831903)\n\n\n0.2.2 (2016-12-11)\nBug Fixes\n\ndraggable: only emit the dragEnd event once (52e9a22)\n\n\n0.2.1 (2016-12-10)\nBug Fixes\n\nrevert duplicate dragging fix as it caused worse errors (7476301)\n\n\n0.2.0 (2016-12-10)\nBug Fixes\n\ncompletely remove applied styled after dragging (3445337)\ndraggable: dont fire duplicate dragging events with the same coordinates (222914b), closes #6\ndraggable: when dragging is disabled, no drag events should be emitted (729f24e)\ndroppable: only allow dropping of events when the cursor is inside (652d632), closes #5\n\nFeatures\n\ndraggable: auto change the cursor to the move icon on hover (50d1962), closes #9\nsnapGrid: rename to dragSnapGrid (a77d07a), closes #7\nvalidateDrag: add the validate drag input (9e5ac95), closes #8\n\nBREAKING CHANGES\n\ndroppable: the drag enter, leave and drop events will not fire until cursor is inside the droppable element. This is to mimic how native drag and drop works\nsnapGrid: The snapGrid input has been renamed to dragSnapGrid\n\n\n0.1.1 (2016-12-09)\nBug Fixes\n\ndraggable: disable pointer events on the element when dragging (f29b424)\n\n\n0.1.0 (2016-11-27)\nBug Fixes\n\ndraggable: dispose of observables when the component is destroyed (710c7f7)\nprevent the default move move interaction on dragging (d2fdcde)\n\nFeatures\n\ndragAxix: allow the drag axis to be locked to just x and y (38fd4b5), closes #2\ndraggable: add mwlDraggable directive (c6771eb)\ndroppable: add the mwlDroppable directive (6016f12), closes #1\nghostDragEnabled: add option to disable the ghost dragging effect (709327c), closes #3\nsnapGrid: implement draggable snap grids (16a3df8), closes #4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer dependencies\n    \n    \n        \n            @angular/core : >=6.0.0 \n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            isCoordinateWithinRectangle   (projects/.../droppable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            isCoordinateWithinRectangle\n                            \n                            \n                        \n                    \n                \n                \n                    \nisCoordinateWithinRectangle(clientX: undefined, clientY: undefined, rect: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientX\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        clientY\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        rect\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nangular 6.0+ drag and drop\n\n\n\n\n\n\n\nDemo\nhttps://mattlewis92.github.io/angular-draggable-droppable/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\nObservable powered drag and drop for angular 6.0+\nInstallation\nInstall through npm:\nnpm install --save angular-draggable-droppableThen use it in your app like so:\nimport { Component, NgModule } from '@angular/core';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\n\n@NgModule({\n  declarations: [DemoApp],\n  imports: [DragAndDropModule],\n  bootstrap: [DemoApp]\n})\nclass DemoModule {}\n\n@Component({\n  selector: 'demo-app',\n  template: `\n    Drag me!\n    \n      Drop here\n      Item dropped here with data: \"{{ droppedData }}\"!\n    \n  `\n})\nclass DemoApp {\n  droppedData: string;\n\n  dragEnd(event) {\n    console.log('Element was dragged', event);\n  }\n}You may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source and can be viewed here:\nhttps://mattlewis92.github.io/angular-draggable-droppable/docs/\nAlternatives\nI wrote this library because I needed drag and drop whilst snapping to a grid. If you don't need this feature then I recommend checking out one of these other awesome drag and drop libraries:\n\nAngular material CDK drag and drop\nangular-skyhook\nng-drag-drop\n\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM (should come with)\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\nnpm run releaseLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 Matt Lewis\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        DragAndDropModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ValidateDrag   (projects/.../draggable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n    \n        \n            \n                \n                    \n                        \n                        ValidateDrag\n                    \n                \n                \n                    \n                        ValidateDrag:     function\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
